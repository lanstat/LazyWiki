window.wikiDataBase={count:7,articles:{is_5:{title:'is 5',content:'\n[[File:Is5Cummings.jpg|thumb|First edition (publ. [[Boni & Liveright]])]]\n\'\'\'\'\'is 5\'\'\'\'\' is a collection of [[poetry]] by [[E. E. Cummings]], published in 1926.<ref>{{cite book|last=Dendinger|first=Lloyd N.|title=E. E. Cummings, the critical reception|year=1981|publisher=Ayer Publishing|isbn=978-0-89102-124-7|page=57}}</ref>  It contains 88 poems, divided into five sections.\n\nThe collection includes a number of satirical and anti-war poems, perhaps influenced by Cummings\' time spent as an ambulance driver in France during the [[World War I|First World War]].  Notable poems from the collection are "[http://www.webcitation.org/query?url=http://www.geocities.com/SoHo/8454/276.htm&date=2009-10-25+09:57:28 my sweet old etcetera]", "[http://www.purewatergazette.net/olaf.htm i sing of Olaf glad and big]", and "[http://www.webcitation.org/query?url=http://www.geocities.com/SoHo/8454/290.htm&date=2009-10-25+09:57:33 since feeling is first]".\n\n==References==\n{{Reflist}}\n'},is_7:{title:'is 7',content:'asdas asdasd'},Fortunio_Bonanova:{title:'Fortunio Bonanova',content:'{{Infobox person\n| name            = Fortunio Bonanova\n| image           = Fortunio Bonanova in Fiesta trailer.jpg\n| image_size      = 160px\n| caption         = From the film \'\'Fiesta\'\' (1947)\n| birth_name      = Josep Lluis Moll\n| birth_date      = {{Birth date|1895|1|13|df=y}}\n| birth_place     = [[Palma de Mallorca]], [[Mallorca]], [[Balearic Islands]], Spain\n| death_date      = {{Death date and age|1969|4|2|1895|1|13|df=y}}\n| death_place     = [[Woodland Hills, Los Angeles, California]], U.S.\n| other_names     =\n| occupation      = Actor/Opera singer\n| years_active    = 1922–1964\n| awards          =\n| website         =\n| spouse          = \n| partner         =\n| notable role    =\n}}\n\n\'\'\'Fortunio Bonanova\'\'\' is the pseudonym of \'\'\'Josep Lluís Moll\'\'\' (13 January 1895 in [[Palma de Mallorca]] &ndash; 2 April 1969 in [[Woodland Hills, Los Angeles|Woodland Hills]], [[California]]), who was a Spanish [[baritone]] singer and a film, theater, and television actor. He occasionally worked as a producer and director.\n\nAccording to Lluis Fàbregas Cuixart,{{efn|1 = Luis Fábregas y Cuxart (Palma 1906–1979) was a fairly well-known Mallorcan author}} the pseudonym \'\'Fortunio Bonanova\'\' referred to his desire to seek fortune, and his love of the Bonanova neighborhood in his native [[Palma de Mallorca]].\n\n== Biography ==\nAs a young man, living under his birthname, he was a professional [[telegraph]] operator. He studied [[music]] with the [[Italy|Italian]] Giovachini. In 1921, he debuted as a singer in \'\'[[Tannhäuser (Wagner)|Tannhäuser]]\'\', at the Teatre Principal in Palma. That year, along with a group of [[Majorca]]n intellectuals and [[Jorge Luis Borges]] (who was briefly living in Majorca with his parents and sister), he signed the Ultraist Manifesto, using the name Fortunio Bonanova.\n\nAlso in 1921, he appeared in a silent film of \'\'[[Don Juan Tenorio]]\'\' by the brothers Baños, which was shown the following year in [[New York City]] and [[Hollywood]]. He later directed his own \'\'Don Juan\'\' in 1924.\n\nIn 1927, he acted in \'\'Love of Sonya\'\', directed by [[Albert Parker (director)|Albert Parker]] and starring [[Gloria Swanson]]. In 1932 he had small parts in Hollywood productions featuring [[Joan Bennett]] and [[Mary Astor]]. In the same period, he appeared in New York in several [[opera]]s as well as the  [[zarzuela]]s \'\'La Canción del Olvido\'\' ("The song of forgetting"), \'\'La Duquesa del Tabarín\'\' ("The Duchess of Tabarín"), \'\'Los Gavilanes\'\', and \'\'La Montería\'\'. In 1934, he returned to [[Spain]], where he had a major role in the film \'\'El Desaparecido\'\' ("The disappeared one") written and directed by Antonio Graciani. In 1935 he acted and sang in the film \'\'Poderoso Caballero\'\' ("A Big Guy"), directed by Màximo Nossik.\n\nIn 1936, with the outbreak of the [[Spanish Civil War]], he returned to the United States, where he played the role of Captain Bill in a film called \'\'Capitán Tormenta\'\', directed by Jules Bernhardt. A sequence of increasingly larger acting and singing roles mostly in English-language films followed, especially after 1940. Among his roles were Signor Matiste, Susan Alexander Kane\'s opera coach in \'\'[[Citizen Kane]]\'\' (1941); General Sebastiano in \'\'[[Five Graves to Cairo]]\'\' (1943); Don Miguel in \'\'[[The Black Swan (film)|The Black Swan]]\'\' (1942); Fernando in \'\'[[For Whom the Bell Tolls (film)|For Whom the Bell Tolls]]\'\' (1943); Sam Garlopis in \'\'[[Double Indemnity (film)|Double Indemnity]]\'\' (1944);<ref>{{AFI film|2201|Double Indemnity}}</ref> and a singing [[Christopher Columbus]] in \'\'[[Where Do We Go From Here? (movie)|Where Do We Go From Here?]]\'\'. He continued for the next several decades in a miscellany of character roles.\n\nBonanova was also an uncredited technical consultant for the film \'\'[[Blood and Sand (1941 film)|Blood and Sand]]\'\' (1941), and produced and appeared in the Spanish-language film \'\'La Inmaculada\'\' (a name of the [[Blessed Virgin Mary|Virgin Mary]], "Immaculate")(1939).\n\nBonanova played the father of twins [[Esther Williams]], and [[Ricardo Montalbán]] in the 1947 film \'\'[[Fiesta (1947 film)|Fiesta]]\'\'.  In 1949, Bonanova collaborated with Ambrose Barker (a former music hall performer who had, with his partner/wife, Peggy Wynne, had some success on the British colonial circuit in the 1920s–1930s) on a musical entitled "Glamor/Glamour is the Gimmick." It got bad reviews—what may have been popular and witty in the early 1930s didn’t make it in 1949.<ref>Billboard, 22 October 1949, pg. 24</ref>\n\nIn the 1950s, he appeared in an episode of \'\'[[I Love Lucy]]\'\' as a fake psychic who uses his stage apparatus to make it appear as though Lucy is able to speak Spanish to her mother-in-law.\n\nIn 1953 he played [[Lou Costello]]\'s Uncle Bozzo in the [[Abbott & Costello]] episode of "Uncle Bozzo\'s Visit."\n\nBonanova died in 1969 in [[Woodland, California]] of a [[cerebral hemorrhage]] and is buried at [[Holy Cross Cemetery, Culver City|Holy Cross Cemetery]] in [[Culver City, California]].\n\n==Partial filmography==\n{{Div col|cols=2}}\n* \'\'[[Careless Lady]]\'\' (1932)\n* \'\'[[A Successful Calamity]]\'\' (1932)\n* \'\'[[Captain Calamity (film)#Spanish version|El capitan Tormenta]]\'\' (1936)\n* \'\'[[I Was an Adventuress]]\'\' (1940)\n* \'\'[[Down Argentine Way]]\'\' (1940)\n* \'\'[[The Mark of Zorro (1940 film)|The Mark of Zorro]]\'\' (1940) (uncredited)\n* \'\'[[Citizen Kane]]\'\' (1941)\n* \'\'[[Moon Over Miami (film)|Moon Over Miami]]\'\' (1941)\n* \'\'[[Blood and Sand (1941 film)|Blood and Sand]]\'\' (1941)\n* \'\'[[A Yank in the R.A.F.]]\'\' (1941)\n* \'\'[[Mr. and Mrs. North (film)|Mr. and Mrs. North]]\'\' (1942)\n* \'\'[[Obliging Young Lady]]\'\' (1942)\n* \'\'[[Larceny, Inc.]]\'\' (1942)\n* \'\'[[Girl Trouble (1942 film)|Girl Trouble]]\'\' (1942)\n* \'\'[[The Black Swan (film)|The Black Swan]]\'\' (1942) (uncredited)\n* \'\'[[Five Graves to Cairo]]\'\' (1943)\n* \'\'[[Dixie (film)|Dixie]]\'\' (1943)\n* \'\'[[For Whom the Bell Tolls (film)|For Whom the Bell Tolls]]\'\' (1943)\n* \'\'[[Ali Baba and the Forty Thieves (1944 film)|Ali Baba and the Forty Thieves]]\'\' (1944)\n* \'\'[[My Best Gal]]\'\' (1944)\n* \'\'[[Double Indemnity (film)|Double Indemnity]]\'\' (1944)\n* \'\'[[Going My Way]]\'\' (1944)\n* \'\'[[Mrs. Parkington]]\'\' (1944)\n* \'\'[[Brazil (1944 film)|Brazil]]\'\' (1944)\n* \'\'[[Where Do We Go from Here? (1945 film)|Where Do We Go from Here?]]\'\' (1945)\n* \'\'[[Mischievous Susana]]\'\' (1945)\n* \'\'[[A Bell for Adano]]\'\' (1945)\n* \'\'[[Man Alive (1945 film)|Man Alive]]\'\' (1945)\n* \'\'[[The Red Dragon]]\'\' (1946)\n* \'\'[[Monsieur Beaucaire (1946 film)|Monsieur Beaucaire]]\'\' (1946)\n* \'\'[[Fiesta (1947 film)|Fiesta]]\'\' (1947)\n* \'\'[[The Kneeling Goddess]]\'\' (1947)\n* \'\'[[The Fugitive (1947 film)|The Fugitive]]\'\' (1947)\n* \'\'[[Romance on the High Seas]]\'\' (1948)\n* \'\'[[Angel on the Amazon]]\'\' (1948)\n* \'\'[[Adventures of Don Juan]]\'\' (1948)\n* \'\'[[Bad Men of Tombstone]]\'\' (1949)\n* \'\'[[Whirlpool (1949 film)|Whirlpool]]\'\' (1949)\n* \'\'[[Nancy Goes to Rio]]\'\' (1950)\n* \'\'[[September Affair]]\'\' (1950)\n* \'\'[[Havana Rose]]\'\' (1951)\n* \'\'[[Thunder Bay (film)|Thunder Bay]]\'\' (1953)\n* \'\'[[The Moon Is Blue]]\'\' (1953)\n* \'\'[[So This Is Love (film)|So This Is Love]]\'\' (1953)\n* \'\'[[Second Chance (1953 film)|Second Chance]]\'\' (1953)\n* \'\'[[Conquest of Cochise]]\'\' (1953)\n* \'\'[[New York Confidential (film)|New York Confidential]]\'\' (1955)\n* \'\'[[Kiss Me Deadly]]\'\' (1955)\n* \'\'[[Jaguar (1956 film)|Jaguar]]\'\' (1956)\n* \'\'[[An Affair to Remember]]\'\' (1957)\n* \'\'[[Thunder in the Sun]]\'\' (1959)\n* \'\'[[The Running Man (1963 film)|The Running Man]]\'\' (1963)\n{{Div col end}}\n\n==Notes==\n{{notelist}}\n\n==References==\n{{Reflist}}\n* Catalina Aguiló & J.A. Mendiola, \'\'Fortunio Bonanova : un home de llegenda\'\', Mallorca 1997.\n\n\'\'Much of the material in this article comes from the [[:ca:Fortunio Bonanova|corresponding article]] in the Catalan Wikipedia\'\'.\n\n==External links==\n{{Commons}}\n* {{IMDb name|0093769}}\n* [http://www.webcitation.org/query?url=http://www.geocities.com/vienna/1059/operalis.html&date=2009-10-25+23:57:36  Opera singers in the movies]\n* [http://www.cinefania.com/persona.php/Fortunio+Bonanova/ Fortunio Bonanova on Cinefania]\n* [http://www.rottentomatoes.com/p/FortunioBonanova-1020243/ Fortunio Bonanova on Rotten Tomatoes]\n* {{IBDB name|66907}}\n\n{{Authority control}}\n\n<!-- Metadata: see [[Wikipedia:Persondata]] -->\n{{DEFAULTSORT:Bonanova, Fortunio}}\n[[Category:1895 births]]\n[[Category:1969 deaths]]\n[[Category:Catalan male film actors]]\n[[Category:Spanish male film actors]]\n[[Category:Spanish male singers]]\n[[Category:Catalan singers]]\n[[Category:People from Palma, Majorca]]\n[[Category:Balearic singers]]\n[[Category:20th-century Spanish male actors]]\n[[Category:20th-century opera singers]]\n[[Category:Spanish expatriates in the United States]]\n[[Category:Spanish baritones]]\n[[Category:Spanish opera singers]]\n[[Category:20th-century Spanish musicians]]'},The_Beatles:{title:'Lights On (Katy B song)',content:'{{For|the Blakes EP|The Blakes}}\n{{Infobox single\n| Name          = Lights On\n| Cover         = Lights On.jpg\n| Alt           = A blue background with the words "KATY B LIGHTS ON feat. Ms DYNAMITE" in white\n| B-side        = Lights On ([[Skream]] Remix)\n| Artist        = [[Katy B]] featuring [[Ms. Dynamite]]\n| Album         = [[On a Mission (Katy B album)|On a Mission]]\n| Released      = {{start date|2010|12|10|df=y}}<br/><small>(see [[#Release history|release history]])</small>\n| Format        = [[music download|Digital download]]\n| Recorded      = 2010\n| Genre         = [[UK funky]], [[house music|house]]\n| Length        = {{duration||3|25}}\n| Label         = [[Columbia Records|Columbia]]\n| Writer        = [[Katy B|Katie Brien]]<br>[[Ms. Dynamite|Niomi McLean-Daley]]\n| Producer      = Geeneus\n| Chronology    = [[Katy B]] singles\n| Last single   = "[[Perfect Stranger (Magnetic Man song)|Perfect Stranger]]"<br>(2010)\n| This single   = "\'\'\'Lights On\'\'\'"<br>(2010)\n| Next single   = "[[Broken Record (Katy B song)|Broken Record]]"<br>(2011)\n| Misc          = {{Extra chronology\n| Artist        = [[Ms. Dynamite]] singles\n| Type          = singles\n| Last single   = "[[What You Talking About!?]]"<br>(2010)\n| This single   = "\'\'\'Lights On\'\'\'"<br>(2010)\n| Next single   = "[[Neva Soft]]"<br>(2011)\n}}\n}}\n\n\'\'\'"Lights On"\'\'\' is a song performed by British recording artist [[Katy B]] and serves as the second single from her debut album, \'\'[[On a Mission (Katy B album)|On a Mission]]\'\'. It features UK-based R&B singer/ rapper [[Ms. Dynamite]]. It released in the [[United Kingdom]] on 10 December 2010 as a [[music download|digital download]]. It peaked at number 4 on the [[UK Singles Chart]] on 26 December 2010.\n\n==Chart performance==\nHaving initially been predicted to debut at number 2 behind \'\'[[The X Factor (UK)|The X Factor]]\'\' winner [[Matt Cardle]]\'s "[[When We Collide]]",<ref>{{cite web|url=http://www.digitalspy.co.uk/music/thesound/a294320/can-katy-b-topple-matt-cardle.html |title=Can Katy B topple Matt Cardle? - Music Blog |publisher=Digital Spy |date=2010-12-21 |accessdate=2014-02-26}}</ref> "Lights On" debuted on the [[UK Singles Chart]] at number 4 on 26 December 2010. The single served as the highest new entry that week but was beaten by Cardle, [[Black Eyed Peas]] and [[Rihanna]] with "When We Collide", "[[The Time (Dirty Bit)]]" and "[[What\'s My Name? (Rihanna song)|What\'s My Name?]]" respectively. After falling 7 places to number 11 on its second week in the chart, the single rebounded to its peak of number 4 on 9 January 2011, where it remained for two consecutive weeks. "Lights On" also debuted on the [[Scottish Singles and Albums Chart|Scottish Singles Chart]] on 26 December at number 11, again serving as the highest new entry for the week ending 1 January 2011. The song later went on to reach new peak of number 9.\n\n==Track listing==\n{{track listing\n|headline=Digital download\n|title1   = Lights On\n|note1    = Single Mix\n|length1  = 3:25\n|title2   = Lights On\n|note2    = [[Skream]] Remix\n|length2  = 4:03\n}}\n{{track listing\n|headline=7" vinyl<ref>{{cite web|url=http://www.hhv.de/item_225153.html |title=Katy B - Lights On\' feat. Ms Dynamite - 12" - 2010 - UK - Original &#124; hhv.de &#124; shop |publisher=hhv.de |date= |accessdate=2014-02-26}}</ref>\n|title1   = Lights On\n|note1    = Skream Remix) (Katy B featuring Ms Dynamite\n|length1  = 4:04\n|title2   = Lights On\n|note2    = Original) (Katy B featuring Ms Dynamite\n|length2  = 3:27\n|title3   = Lights On\n|note3    = Girl Unit Remix) (Katy B featuring Ms Dynamite)\n|length3  = \n}}\n\n==Charts==\n{|class="wikitable sortable"\n|-\n! Chart (2011)\n! Peak<br/>position\n|-\n{{singlechart|Flanders|11|artist=Katy B feat. Ms Dynamite|song=Lights On}}\n|-\n{{singlechart|Wallonia Tip|25|artist=Katy B feat. Ms Dynamite|song=Lights On|date=2011-11-07}}\n|-\n{{singlechart|UK|4|artist=Katy B ft. Ms. Dynamite|song=Lights On|date=2011-01-01}}\n|-\n{{singlechart|UKdownload|4|artist=Katy B ft. Ms. Dynamite|song=Lights On|date=2011-01-01}}\n|-\n{{singlechart|Scotland|9|artist=Katy B ft. Ms. Dynamite|song=Lights On|date=2011-01-01}}\n|}\n\n==Release history==\n{| class="wikitable"\n|-\n!Country\n!Date\n!Format\n|-\n|rowspan="2"|United Kingdom\n|10 December 2010<ref>{{cite web|url=http://itunes.apple.com/gb/album/lights-on-feat.-ms-dynamite/id402731165 |title=iTunes - Music - Lights On (feat. Ms Dynamite) - Single by Katy B |publisher=Itunes.apple.com |date=2010-12-19 |accessdate=2014-02-26}}</ref>\n|Digital download\n|-\n|20 December 2010\n|12" Vinyl\n|}\n\n==References ==\n{{Reflist}}\n\n{{Katy B singles}}\n{{Ms. Dynamite}}\n{{Use dmy dates|date=November 2010}}\n\n[[Category:Katy B songs]]\n[[Category:Ms. Dynamite songs]]\n[[Category:2010 singles]]\n[[Category:Songs written by Katy B]]\n[[Category:Songs written by Ms. Dynamite]]'},AngularJS:{title:'AngularJS',content:'{{Infobox software\n| name                   = AngularJS\n| logo                   = [[File:AngularJS logo.svg|250px|AngularJS logo]]\n| developer              = [[Google]]\n| released               = {{Start date and age|2010|10|20}}<ref>[https://github.com/angular/angular.js/releases?after=v0.9.4 Earliest known releases]</ref>\n| latest release version = 1.5.7\n| latest release date    = {{Start date and age|2016|06|15}}<ref>[https://github.com/angular/angular.js/releases/tag/v1.5.7 1.5.7 release]</ref>\n| latest preview version = 2.0.0 RC4<ref>[https://www.npmjs.com/package/angular2 Angular 2 - a web framework for modern web apps]</ref>\n| latest preview date    = {{Start date and age|2016|06|30}}\n| status                 = Active\n| programming language   = [[TypeScript]], [[JavaScript]]\n| platform       = [[Cross-platform]], see [[#Legacy browser support|Legacy browser support]]\n| size                   = 144 KB production<br />1 MB development\n| genre                  = [[JavaScript]], [[Single-page application]] Framework\n| license                = [[MIT License]]\n| website                = {{url|https://www.angularjs.org/}}<br>{{url|https://angular.io/}}\n}}\n\n\'\'\'AngularJS\'\'\' (commonly referred to as "\'\'\'Angular\'\'\'" or "\'\'\'Angular.js\'\'\'") is a complete JavaScript-based [[open-source software|open-source]] client and server-side [[web application framework]] mainly maintained by [[Google]] and by a community of individuals and corporations to address many of the challenges encountered in developing [[single-page application]]s. The JavaScript components complement [[Apache Cordova|PhoneGap]], the framework used for developing cross-platform mobile apps. It aims to simplify both the development and the [[software testing|testing]] of such applications by providing a framework for client-side [[model–view–controller]] (MVC) and [[Model View ViewModel|model–view–viewmodel]] (MVVM) architectures, along with components commonly used in [[rich Internet application]]s.\n\nThe AngularJS framework works by first reading the [[HTML]] page, which has embedded into it additional custom [[HTML attribute|tag attributes]]. Angular interprets those attributes as [[Directive (programming)|directives]] to bind input or output parts of the page to a model that is represented by standard [[JavaScript]] [[Variable (computer science)|variables]]. The values of those JavaScript variables can be manually set within the code, or retrieved from static or dynamic [[JSON]] resources.\n\nAccording to [[JavaScript]] analytics service [[Libscore]], AngularJS is used on the websites of [[Wolfram Alpha]], [[NBC]], [[Walgreens]], [[Intel]], [[Sprint Nextel|Sprint]], [[ABC News]], and approximately 8,400 other sites out of 1 million tested in July 2015.<ref>{{Cite web|url=http://libscore.com/?#angular|title=Libscore|website=libscore.com|access-date=2016-07-13}}</ref>\n\nAngularJS is the frontend part of the [[MEAN (software bundle)|MEAN stack]], consisting of [[MongoDB|\'\'\'M\'\'\'ongoDB]] database, [[Express.js|\'\'\'E\'\'\'xpress.js]] web application server framework, \'\'\'A\'\'\'ngular.js itself, and [[Node.js|\'\'\'N\'\'\'ode.js]] runtime environment.\n\n==Angular JS==\nAngularJS is built on the belief that [[declarative programming]] should be used to create [[user interface]]s and connect [[software component]]s, while [[imperative programming]] is better suited to defining an application\'s [[business logic]].<ref>{{cite web |url=https://docs.angularjs.org/guide/introduction |title=What Is Angular? |deadurl=no |accessdate=12 February 2013}}</ref> The framework adapts and extends traditional HTML to present dynamic content through two-way data-binding that allows for the automatic synchronization of models and views. As a result, AngularJS de-emphasizes explicit DOM manipulation with the goal of improving testability and performance.\n\nAngularJS\'s design goals include:\n*to decouple [[Document Object Model|DOM]] manipulation from application logic. The difficulty of this is dramatically affected by the way the code is structured.\n*to decouple the client side of an application from the server side. This allows development work to progress in parallel, and allows for reuse of both sides.\n*to provide structure for the journey of building an application: from designing the UI, through writing the business logic, to testing.\n\nAngular implements the MVC pattern to separate presentation, data, and logic components. Using [[dependency injection]], Angular brings traditionally [[server-side]] services, such as view-dependent controllers, to client-side web applications. Consequently, much of the burden on the server can be reduced.\n\n==Scope==\nAngular uses the term "scope" in a manner akin to the fundamentals of computer science.\n\n[[Scope (computer science)|Scope]] in computer science describes when in the program a particular [[Name binding|binding]] is valid. The [[ECMA-262]] specification defines scope as: a lexical environment in which a Function object is executed in client-side web scripts;<ref name=es5-x10.2>{{cite web|title=Annotated ECMAScript 5.1, Section 10.2 Lexical Environments|url=https://es5.github.io/#x10.2|accessdate=2015-01-03}}</ref> akin to how scope is defined in [[lambda calculus]].<ref name="BarendregtBarendsen">{{Citation\n  | last = Barendregt\n  | first = Henk\n  | author-link =\n  | last2 = Barendsen\n  | first2 = Erik\n  | author2-link =\n  | title = Introduction to Lambda Calculus\n  | place =\n  | publisher =\n  | year = March 2000\n  | volume =\n  | edition =\n  | url = ftp://ftp.cs.ru.nl/pub/CompMath.Found/lambda.pdf\n  | doi =\n  | id =\n  | isbn = }}</ref>\n\nAs a part of the "MVC" architecture, the scope forms the "Model", and all variables defined in the scope can be accessed by the "View" as well as the "Controller". The scope behaves as a glue and binds the "View" and the "Controller".\n\nIn Angular, "scope" is a certain kind of [[Object (computer science)|object]]<ref name=angular-scope>{{cite web|title=AngularJS: Developer Guide: Scopes|url=https://docs.angularjs.org/guide/scope|accessdate=2015-01-03}}</ref> that itself can be in scope or out of scope in any given part of the program, following the [[Scope (computer science)#JavaScript|usual rules]] of [[Variable (computer science)#Scope and extent|variable scope]] in JavaScript like any other object.<ref name=ecmascript-scope>{{cite web|title=ECMA-262-3 in detail. Chapter 4. Scope chain.|url=http://dmitrysoshnikov.com/ecmascript/chapter-4-scope-chain/|accessdate=2015-01-03}}</ref> When the term "scope" is used below, it refers to the Angular scope object and not the scope of a name binding.\n\n==Bootstrap==\nThe tasks performed by the AngularJS [[bootstrapper]] occur in three phases<ref name="Writing Directives">{{cite web | url = https://www.youtube.com/watch?v=WqmeI5fZcho&list=TLJUxRYO87UWA | title = Writing Directives | date = November 28, 2012 | publisher = angularjs.org | accessdate = 2013-07-21 }}</ref> after the DOM has been loaded:\n#Creation of a new Injector\n#Compilation of the directives that decorate the DOM\n#Linking of all directives to scope\n\nAngularJS directives allow the developer to specify custom and reusable HTML-like elements and attributes that define data bindings and the behavior of presentation components. Some of the most commonly used directives are:\n\n;ng-app: Declares the root element of an AngularJS application, under which directives can be used to declare bindings and define behavior.\n;ng-bind: Sets the text of a DOM element to the value of an expression. For example, <code><nowiki><span ng-bind="name"></span></nowiki></code> displays the value of ‘name’ inside the span element. Any change to the variable ‘name’ in the application\'s scope reflect instantly in the DOM.\n;ng-model: Similar to ng-bind, but establishes a two-way data binding between the view and the scope.\n;ng-model-options: Provides tuning for how model updates are done.\n;ng-class: Lets class attributes be dynamically loaded.\n;ng-controller: Specifies a JavaScript controller class that evaluates HTML expressions.\n;ng-repeat: Instantiate an element once per item from a collection.\n;ng-show & ng-hide: Conditionally show or hide an element, depending on the value of a boolean expression. Show and hide is achieved by setting the CSS display style.\n;ng-switch: Conditionally instantiate one template from a set of choices, depending on the value of a selection expression.\n;ng-view: The base directive responsible for handling routes that resolve JSON before rendering templates driven by specified controllers.\n;ng-if: Basic if statement directive that allow to show the following element if the conditions are true. When the condition is false, the element is removed from the DOM. When true, a clone of the compiled element is re-inserted\n;ng-aria: A module for accessibility support of common [[WAI-ARIA|ARIA attributes]].\n;ng-animate: A module provides support for JavaScript, CSS3 transition and CSS3 keyframe animation hooks within existing core and custom directives.\n\nSince \'\'\'ng-*\'\'\' attributes are not valid in HTML specifications, \'\'\'data-ng-*\'\'\' can also be used as a prefix. For example, both \'\'\'ng-app\'\'\' and \'\'\'data-ng-app\'\'\' are valid in AngularJS.\n\n==Two-way data binding==\nAngularJS\' two-way [[data binding]] is its most notable feature,<ref>{{cite web|title=AngularJS Features|url=http://angularjsfeatures.blogspot.in/2016/06/top-10-websites-built-using-angularjs.html}}</ref> largely relieving the server backend of templating responsibilities. Instead, templates are rendered in plain HTML according to data contained in a scope defined in the model. The <code>$scope</code> service in Angular detects changes to the model section and modifies HTML expressions in the view via a controller. Likewise, any alterations to the view are reflected in the model. This circumvents the need to actively manipulate the DOM and encourages bootstrapping and rapid prototyping of web applications.<ref>{{cite web |url=http://net.tutsplus.com/tutorials/javascript-ajax/5-awesome-angularjs-features/ |title=5 Awesome AngularJS Features |deadurl=no |accessdate=13 February 2013}}</ref>\nAngularJS detects changes in models by comparing the current values with values stored earlier in a process of dirty-checking, unlike [[Ember.js]] and [[Backbone.js]] that trigger listeners when the model values are changed.<ref name="Misko Hevery">{{cite web | title = Databinding in angularjs | author = Misko Hevery | url = https://stackoverflow.com/a/9693933/146423 | accessdate= 2014-03-09 }}</ref>\n\n==Development history==\nAngularJS was originally developed in 2009 by Miško Hevery<ref name=angularishere>{{cite web|title=Hello World, <angular/> is here|url=http://misko.hevery.com/2009/09/28/hello-world-angular-is-here/|accessdate=2014-10-12}}</ref> at Brat Tech LLC<ref name=getangular-archive.org>{{cite web|title=GetAngular|archive-url=https://web.archive.org/web/20100413141437/http://getangular.com/ |archive-date=2010-04-13 |url=http://getangular.com/ |deadurl=yes |publisher=Angular / BRAT Tech. LLC|accessdate=2014-10-12}} {{cbignore}}</ref> as the software behind an online [[JSON]] storage service, that would have been priced by the megabyte, for easy-to-make applications for the enterprise. This venture was located at the web domain "GetAngular.com",<ref name="getangular-archive.org"/> and had a few subscribers, before the two decided to abandon the business idea and release Angular as an open-source library.\n\n===Releases===\n\n====Angular 1====\nThe current stable release of AngularJS is 1.5.7.<ref>{{Cite web|url=https://github.com/angular/angular.js/blob/master/CHANGELOG.md#157-hexagonal-circumvolution-2016-06-15|title=angular/angular.js|website=GitHub|access-date=2016-07-13}}</ref>\n\n====Angular 2====\nAngularJS 2.0 was announced at the ng-Europe conference 22-23. September 2014.<ref>{{cite web | title = A sneak peek at the radically new Angular 2.0 | author = Coman Hamilton| url = https://jaxenter.com/angular-2-0-112094.html | accessdate= 2015-10-21 }}</ref> The drastic changes in the 2.0 version created considerable controversy among developers.<ref>{{cite web | title = Angular 2.0 announcement backfires | author = Coman Hamilton| url = https://jaxenter.com/angular-2-0-announcement-backfires-112127.html | accessdate= 2015-10-21 }}</ref> On April 30, 2015, the AngularJS developers announced that Angular 2 moved from Alpha to Developer Preview.<ref>{{Cite tweet |title=Angular 2 moves from Alpha to Developer Preview! Dev guide and API docs now available at ... angular.io/docs/js/latest |user=angularjs |number=593797019258359809 |date=30 Apr 2015 |accessdate=2015-10-21}}</ref> AngularJS 2 can be downloaded from the [https://angular.io official website]. Angular 2 moved to Beta in December 2015,<ref>{{Cite web|url=http://angularjs.blogspot.it/2015/12/angular-2-beta.html|title=Angular: Angular 2 Beta|website=angularjs.blogspot.it|access-date=2016-07-13}}</ref> and the first release candidate was published in May 2016.<ref>{{Cite web|url=https://github.com/angular/angular/blob/master/CHANGELOG.md#200-rc0-2016-05-02|title=angular/angular|website=GitHub|access-date=2016-05-04}}</ref>\n\nAngular 2 is not a version upgrade, but a complete rewrite.  The primary differences in Angular 2 over Angular 1 are:<ref>[http://bindasmonkeys.com/7-key-differences-angular-1-angular-2-code-examples/ "7 key differences between Angular 1 and Angular 2"]</ref>\n* Mobile development - desktop development is much easier when mobile performance issues are handled first\n* Modularity - much core functionality has moved to modules, producing a lighter, faster core\n* Modern browsers only - reducing the need for [[Cross-browser|browser compatibility]] workarounds\n* Angular 2 recommends the use of Microsoft\'s [[TypeScript]] language, which introduces the following improvements:\n** Class-based [[Object-oriented programming|Object Oriented Programming]]\n** [[Static typing|Static Typing]]\n** [[Generic programming|Generics]]\n** [[Lambda (programming)|Lambdas]]\n* TypeScript is a superset of ECMAScript 6, and is [[Backward compatibility|backwards compatible]] with ECMAScript 5 (i.e.: JavaScript).  Angular 2 also includes the benefits of [[ES6]]:\n** Iterators\n** For/Of Loops\n** Python-Style Generators\n** [[Reflection (programming)|Reflection]]\n* Improved [[Dependency injection|Dependency Injection]] - bindings make it possible for dependencies to be named\n* [[Dynamic loading|Dynamic Loading]]\n* Asynchronous Template Compilation\n* Simpler Routing\n* Diary.js Logging - measures where time is spent, to identify bottlenecks<ref>{{Cite web|url=http://www.sitepoint.com/whats-new-in-angularjs-2/|title=What\'s New in AngularJS 2.0|date=2015-03-02|website=SitePoint|language=en-US|access-date=2016-05-04}}</ref>\n* Replacing controllers and $scope with components and directives.  (A component is a directive with a template.)\n\n===Legacy browser support===\nVersions 1.2 and later of AngularJS do not support [[Internet Explorer]] versions 6 or 7.<ref name=angularjs-ie-compat>{{cite web|title=AngularJS: Developer Guide: Internet Explorer Compatibility|url=https://docs.angularjs.org/guide/ie|publisher=Google|accessdate=2014-10-12}}</ref> Versions 1.3 and later of AngularJS dropped support for Internet Explorer 8.<ref name=angularjs-13>{{cite web|last1=Minar|first1=Igor|title=AngularJS 1.3: a new release approaches|url=http://angularjs.blogspot.com/2013/12/angularjs-13-new-release-approaches.html|website=AngularJS Blog|accessdate=2014-10-12}}</ref>\n\n==Chrome plugin==\nIn July 2012, the Angular team built a plugin for the [[Google Chrome]] browser called Batarang,<ref name=batarang-github>{{cite web|title=angular/angularjs-batarang (GitHub)|url=https://github.com/angular/angularjs-batarang|accessdate=2014-10-12}}</ref> that improves the debugging experience for web applications built with Angular. The extension aims to allow for easy detection of performance bottlenecks and offers a GUI for debugging applications.<ref name=introbatarang>{{cite web|last1=Ford|first1=Brian|title=Introducing the AngularJS Batarang|url=http://angularjs.blogspot.com/2012/07/introducing-angularjs-batarang.html|website=AngularJS Blog|accessdate=2014-10-12}}</ref> For a time during late 2014 and early 2015, the extension was not compatible with recent releases (after v1.2.x) of Angular.<ref>{{Cite web|url = https://stackoverflow.com/questions/23506526/batarang-chrome-extension-for-angularjs-appears-broken|title = batarang Chrome extension for AngularJS appears broken|date = |accessdate = |website = |publisher = |last = |first = }}</ref> It is currently, as of early 2016, still under development and works with all versions of Angular.\n\n==Performance==\nAngularJS sets out the paradigm of a \'\'digest cycle\'\'. This cycle can be considered a loop, during which AngularJS checks if there is any change to all the variables watched by all the <code>$scopes</code>. So, if <code>$scope.myVar</code> is defined in a controller and this variable was marked for watching, AngularJS will monitor the changes on myVar in each loop iteration.\n\nThis approach potentially leads to slow rendering when AngularJS checks on too many variables in the <code>$scope</code> every cycle. Hevery suggests keeping fewer than 2000 watchers on any page.<ref name="Misko Hevery"/>\n\n==See also==\n{{Portal|Free software}}\n* [[Backbone.js]]\n* [[Ember.js]]\n* [[Knockout.js]]\n* [[MEAN (software bundle)]]\n* [[React.js]]\n* [[Comparison of JavaScript frameworks]]\n\n==References==\n{{Reflist}}\n\n==Further reading==\n{{refbegin}}\n*{{cite book\n| first1      = Brad\n| last1       = Green\n| first2      = Shyam\n| last2       = Seshadri\n| date        = March 22, 2013\n| title       = AngularJS\n| publisher   = [[O\'Reilly Media]]\n| edition     = 1st\n| page        = 150\n| isbn        = 978-1449344856\n| url         = http://shop.oreilly.com/product/0636920028055.do\n}}\n*{{cite book\n| first1      = Pawel\n| last1       = Kozlowski\n| first2      = Peter Bacon\n| last2       = Darwin\n| date        = August 23, 2013\n| title       = Mastering Web Application Development with AngularJS\n| publisher   = [[Packt Publishing]]\n| edition     = 1st\n| page        = 372\n| isbn        = 978-1782161820\n| url         = https://www.packtpub.com/angularjs-web-application-development/book\n}}\n*{{cite book\n| first1      = Lukas\n| last1       = Ruebbelke\n| date        = January 1, 2015\n| title       = AngularJS in Action\n| publisher   = [[Manning Publications]]\n| edition     = 1st\n| page        = 325\n| isbn        = 978-1617291333\n| url         = \n}}\n{{refend}}\n\n==External links==\n{{Commons category|AngularJS}}\n* [https://www.angularjs.org/ Official website (original)]\n* [https://angular.io/ Official website]\n<!-- *{{Vimeo|id=43922554|title=Digesting JavaScript MVC}} -->{{JS templating |state=autocollapse}}\n{{Rich Internet applications}}\n{{Application frameworks}}\n{{ECMAScript}}\n{{NodeJs}}\n\n[[Category:Ajax (programming)]]\n[[Category:Google software]]\n[[Category:Rich Internet application frameworks]]\n[[Category:Software using the MIT license]]'},python:{title:'python',content:'{{About|the programming language|the genus and other uses|Python (disambiguation)}}\n{{Use dmy dates|date=August 2015}}\n{{Infobox programming language\n|name                   = Python\n|logo                   = Python logo and wordmark.svg\n|logo size              = 260px\n|paradigm               = [[multi-paradigm programming language|multi-paradigm]]: [[object-oriented programming|object-oriented]], [[imperative programming|imperative]], [[functional programming|functional]], [[procedural programming|procedural]], [[reflective programming|reflective]]\n|released               = {{Start date and age|1991|02|20|df=yes}}<ref>{{cite web|url=http://python-history.blogspot.com/2009/01/brief-timeline-of-python.html|title=The History of Python: A Brief Timeline of Python|work=[[Blogger (service)|Blogger]]|date=2009-01-20|accessdate=2016-03-20}}</ref>\n|designer               = [[Guido van Rossum]]\n|developer              = [[Python Software Foundation]]\n|latest release version = 3.5.2 / {{Start date and age|2016|06|27|df=yes}}<ref>{{cite web |url=http://blog.python.org/2016/06/python-352-and-python-345-are-now.html |title=Python 3.5.2 and Python 3.4.5 are now available |website=Python Insider |publisher=The Python Core Developers |first=Larry |last=Hastings |date=2016-06-27 |accessdate=2016-06-28}}</ref><br>2.7.12 / {{Start date and age|2016|06|28|df=yes}}<ref>{{cite web |url=http://blog.python.org/2016/06/python-2712-released.html  |title=Python 2.7.12 released |website=Python Insider |publisher=The Python Core Developers |first=Benjamin |last=Peterson |date=2016-06-28 |accessdate=2016-06-28}}</ref>\n|latest preview version = 3.6.0a3 / {{Start date and age|2016|07|12df=yes}}<ref name="Python Release Python 3.6.0a3">{{cite web |url=http://blog.python.org/2016/07/python-360-alpha-3-preview-release-is.html |title=Python Release Python 3.6.0a3|publisher=Python Software Foundation|accessdate=12 July 2016}}</ref><!-- <br>2.7.9rc1 / {{Start date and age|2014|11|26|df=yes}}<ref>{{cite web |url=https://www.python.org/downloads/release/python-279rc1/ |title=Python 2.7.9 rc1 Release |publisher=Python Software Foundation |accessdate=26 November 2014}}</ref -->\n|latest preview date=|typing                 = [[duck typing|duck]], [[dynamic typing|dynamic]], [[strong typing|strong]], [[gradual typing|gradual]] (as of Python 3.5)<ref>{{cite web|url=https://lwn.net/Articles/627418/|title=Type hinting for Python|publisher=LWN.net|date=24 December 2014|accessdate=5 May 2015}}</ref>\n|implementations        = [[CPython]], [[IronPython]], [[Jython]], [[MicroPython]], [[PyPy]]\n|dialects               = [[Cython]], [[RPython]], [[Stackless Python]]\n|influenced             = [[Boo (programming language)|Boo]], [[Cobra (programming language)|Cobra]], [[CoffeeScript]],<ref>{{cite web|url=http://coffeescript.org/|title=CoffeeScript borrows chained comparisons from Python}}</ref> [[D (programming language)|D]], [[F Sharp (programming language)|F#]], [[Falcon (programming language)|Falcon]], [[Genie (programming language)|Genie]],<ref>{{cite web \n|url=https://wiki.gnome.org/action/show/Projects/Genie\n|title=Genie Language - A brief guide \n|accessdate=2015-12-28}}</ref> [[Go (programming language)|Go]], [[Groovy (programming language)|Groovy]], [[JavaScript]],<ref>{{cite web\n|title = Perl and Python influences in JavaScript\n|date= 24 February 2013\n|website= www.2ality.com\n|url= http://www.2ality.com/2013/02/javascript-influences.html\n|accessdate= 15 May 2015}}</ref><ref>{{cite web\n|title = Chapter 3: The Nature of JavaScript; Influences\n|last=Rauschmayer\n|first=Axel\n|website=O\'Reilly, Speaking JavaScript\n|url= http://speakingjs.com/es5/ch03.html\n|accessdate= 15 May 2015}}</ref> [[Julia (programming language)|Julia]],<ref name=Julia/> [[Nim (programming language)|Nim]], [[Ruby (programming language)|Ruby]],<ref name="bini"/> [[Swift (programming language)|Swift]],<ref name="lattner2014">{{cite web|url=http://nondot.org/sabre/|title=Chris Lattner\'s Homepage|last=Lattner|first=Chris|date=3 June 2014|accessdate=3 June 2014|publisher=Chris Lattner|quote=The Swift language is the product of tireless effort from a team of language experts, documentation gurus, compiler optimization ninjas, and an incredibly important internal dogfooding group who provided feedback to help refine and battle-test ideas. Of course, it also greatly benefited from the experiences hard-won by many other languages in the field, drawing ideas from Objective-C, Rust, Haskell, Ruby, Python, C#, CLU, and far too many others to list.}}</ref>\n|operating system       = [[Cross-platform]]\n|license                = [[Python Software Foundation License]]\n|website                = {{URL|https://www.python.org/}}\n|influenced_by          = [[ABC (programming language)|ABC]],<ref name="faq-created"/> [[ALGOL 68]],<ref name="98-interview"/> [[C (programming language)|C]],<ref name="AutoNT-1"/> [[C++]],<ref name="classmix"/> [[Dylan (programming language)|Dylan]],<ref name="AutoNT-2"/> [[Haskell (programming language)|Haskell]],<ref name="AutoNT-3"/> [[Icon (programming language)|Icon]],<ref name="AutoNT-4"/> [[Java (programming language)|Java]],<ref name="AutoNT-5"/> [[Lisp (programming language)|Lisp]],<ref name="AutoNT-6"/> [[Modula-3|Modula&#8209;3]],<ref name="classmix" /> [[Perl]]\n|file ext               = .py, .pyc, .pyd, .pyo,.<ref>File extension .pyo will be removed in Python 3.5. See [https://www.python.org/dev/peps/pep-0488/ PEP 0488]</ref> pyw, .pyz<ref>{{cite web|url=https://www.python.org/dev/peps/pep-0441/|last=Holth|first=Moore|date=30 March 2014|accessdate=12 Nov 2015|title=PEP 0441 -- Improving Python ZIP Application Support}}</ref>\n|wikibooks              = Python Programming\n}}\n\n\'\'\'Python\'\'\' is a widely used [[High-level programming language|high-level]], [[General-purpose programming language|general-purpose]], [[Interpreter (computing)|interpreted]], [[dynamic programming language]].<ref name="AutoNT-34" /><ref>{{cite web|url=http://redmonk.com/sogrady/2015/07/01/language-rankings-6-15/|title=The RedMonk Programming Language Rankings: June 2015 – tecosystems|publisher=Redmonk.com|date=1 July 2015|accessdate=10 September 2015}}</ref> Its design philosophy emphasizes code [[readability]], and its syntax allows programmers to express concepts in fewer [[source lines of code|lines of code]] than possible in languages such as [[C++]] or [[Java (programming language)|Java]].<ref name="Summerfield">{{cite book |title=Rapid GUI Programming with Python and Qt |last=Summerfield |first=Mark |quote=Python is a very expressive language, which means that we can usually write far fewer lines of Python code than would be required for an equivalent application written in, say, C++ or Java}}</ref><ref>{{cite book|url=https://books.google.com/books?id=3JfE7TGUwvgC&pg=PT100|title=Code Complete, p. 100|isbn=9780735636972|last1=McConnell|first1=Steve|date=30 November 2009}}</ref> The language provides constructs intended to enable clear programs on both a [[Programming in the large and programming in the small|small and large scale]].<ref name="AutoNT-7" />\n\nPython supports multiple [[programming paradigm]]s, including [[object-oriented programming|object-oriented]], [[imperative programming|imperative]] and [[functional programming]] or [[procedural programming|procedural]] styles. It features a [[dynamic type]] system and automatic [[memory management]] and has a large and comprehensive [[standard library]].<ref name="About" />\n\nPython interpreters are available for many [[operating system]]s, allowing Python code to run on a wide variety of systems. Using [[Third-party software component|third-party]] tools, such as [[Py2exe]] or Pyinstaller,<ref>{{cite web |title=PyInstaller Home Page |url=http://www.pyinstaller.org/|accessdate=27 January 2014}}</ref> Python code can be packaged into stand-alone executable programs for some of the most popular operating systems, so Python-based software can be distributed to, and used on, those environments with no need to install a Python interpreter.\n\n[[CPython]], the [[reference implementation]] of Python, is [[free and open-source software]] and has a community-based development model, as do nearly all of its variant implementations. CPython is managed by the non-profit [[Python Software Foundation]].\n\n== History ==\n[[File:Guido van Rossum OSCON 2006.jpg|thumb|[[Guido van Rossum]], the creator of Python]]\n{{Main article|History of Python}}\n\nPython was conceived in the late 1980s,<ref name="venners-interview-pt-1" /> and its implementation began in December 1989<ref name="timeline-of-python" /> by [[Guido van Rossum]] at [[Centrum Wiskunde & Informatica]] (CWI) in the [[Netherlands]] as a successor to the [[ABC (programming language)|ABC language]] (itself inspired by [[SETL]])<ref name="AutoNT-12" /> capable of [[exception handling]] and interfacing with the operating system [[Amoeba (operating system)|Amoeba]].<ref name="faq-created" /> Van Rossum is Python\'s principal author, and his continuing central role in deciding the direction of Python is reflected in the title given to him by the Python community, \'\'[[benevolent dictator for life]]\'\' (BDFL).\n\nAbout the origin of Python, Van Rossum wrote in 1996:<ref>{{cite web|url=https://www.python.org/doc/essays/foreword/|title=Foreword for "Programming Python" (1st ed.)|last=van Rossum|first=Guido|date=1996|accessdate=10 July 2014}}</ref>\n\n{{quote|Over six years ago, in December 1989, I was looking for a "hobby" programming project that would keep me occupied during the week around Christmas. My office ... would be closed, but I had a home computer, and not much else on my hands. I decided to write an interpreter for the new scripting language I had been thinking about lately: a descendant of [[ABC (programming language)|ABC]] that would appeal to [[Unix]]/[[C (programming language)|C]] [[Hacker (programmer subculture)|hackers]]. I chose Python as a working title for the project, being in a slightly irreverent mood (and a big fan of \'\'[[Monty Python\'s Flying Circus]]\'\').}}\n\nPython 2.0 was released on 16 October 2000 and had many major new features, including a cycle-detecting [[garbage collection (computer science)|garbage collector]] and support for [[Unicode]]. With this release the development process was changed and became more transparent and community-backed.<ref name="newin-2.0" />\n\nPython 3.0 (which early in its development was commonly referred to as Python 3000 or py3k), a major, backwards-incompatible release, was released on 3 December 2008<ref name="3.0-release" /> after a long period of testing. Many of its major features have been [[backporting|backported]] to the backwards-compatible Python 2.6.x<ref name="pep-3000" /> and 2.7.x version series.\n\n== Features and philosophy ==\nPython is a [[multi-paradigm programming language]]: [[object-oriented programming]] and [[structured programming]] are fully supported, and many language features support [[functional programming]] and [[aspect-oriented programming]] (including by [[metaprogramming]]<ref name="AutoNT-13" /> and [[metaobject]]s (magic methods)).<ref name="AutoNT-14" /> Many other paradigms are supported via extensions, including [[design by contract]]<ref name="AutoNT-15" /><ref name="AutoNT-16" /> and [[logic programming]].<ref name="AutoNT-17" />\n\nPython uses [[dynamic typing]] and a mix of [[reference counting]] and a cycle-detecting garbage collector for [[memory management]]. An important feature of Python is dynamic [[Name resolution (programming languages)|name resolution]] ([[late binding]]), which binds method and variable names during program execution.\n\nThe design of Python offers some support for [[functional programming]] in the [[Lisp (programming language)|Lisp]] tradition. The language has map(), reduce() and filter() functions; [[list comprehension]]s, [[Associative array|dictionaries]], and sets; and [[Generator (computer programming)|generator]] expressions.<ref name="AutoNT-59"/> The standard library has two modules (itertools and functools) that implement functional tools borrowed from [[Haskell (programming language)|Haskell]] and [[Standard ML]].<ref name="AutoNT-18" />\n\nThe core philosophy of the language is summarized by the document \'\'The [[Zen of Python]]\'\' (\'\'PEP 20\'\'), which includes [[aphorism]]s such as:<ref name="PEP20" />\n\n* Beautiful is better than ugly\n* Explicit is better than implicit\n* Simple is better than complex\n* Complex is better than complicated\n* Readability counts\n\nRather than requiring all desired functionality to be built into the language\'s core, Python was designed to be highly extensible. Python can also be embedded in existing applications that need a programmable interface. This design of a small core language with a large standard library and an easily extensible interpreter was intended by Van Rossum from the start because of his frustrations with [[ABC (programming language)|ABC]], which espoused the opposite mindset.<ref name="venners-interview-pt-1" />\n\nWhile offering choice in coding methodology, the Python philosophy rejects exuberant syntax, such as in [[Perl]], in favor of a sparser, less-cluttered grammar. As [[Alex Martelli]] put it: "To describe something as clever is \'\'not\'\' considered a compliment in the Python culture."<ref name="AutoNT-19" /> Python\'s philosophy rejects the Perl "[[there is more than one way to do it]]" approach to language design in favor of "there should be one—and preferably only one—obvious way to do it".<ref name="PEP20" />\n\nPython\'s developers strive to avoid [[premature optimization]], and moreover, reject patches to non-critical parts of CPython that would offer a marginal increase in speed at the cost of clarity.<ref name="AutoNT-20" /> When speed is important, a Python programmer can move time-critical functions to extension modules written in languages such as C, or try using [[PyPy]], a [[just-in-time compilation|just-in-time compiler]]. [[Cython]] is also available, which translates a Python script into C and makes direct C-level API calls into the Python interpreter.\n\nAn important goal of Python\'s developers is making it fun to use. This is reflected in the origin of the name, which comes from [[Monty Python]],<ref>{{cite web|url=https://docs.python.org/2/faq/general.html#why-is-it-called-python|title=General Python FAQ - Why is it called Python?}}</ref> and in an occasionally playful approach to tutorials and reference materials, such as using examples that refer to spam and eggs instead of the standard [[Foobar|foo and bar]].<ref>{{cite web|url=http://insidetech.monster.com/training/articles/8114-15-ways-python-is-a-powerful-force-on-the-web|title=15 Ways Python Is a Powerful Force on the Web}}</ref><ref>{{cite web|url=https://docs.python.org/2/library/pprint.html|title=pprint - Data pretty printer - Python Documentation}}</ref>\n\nA common [[neologism]] in the Python community is \'\'pythonic\'\', which can have a wide range of meanings related to program style. To say that code is pythonic is to say that it uses Python idioms well, that it is natural or shows fluency in the language, that it conforms with Python\'s minimalist philosophy and emphasis on readability. In contrast, code that is difficult to understand or reads like a rough transcription from another programming language is called \'\'unpythonic\'\'.\n\nUsers and admirers of Python, especially those considered knowledgeable or experienced, are often referred to as \'\'Pythonists\'\', \'\'Pythonistas\'\', and \'\'Pythoneers\'\'.<ref name="AutoNT-27" /><ref name="AutoNT-25" />\n\n== Syntax and semantics ==\n{{Main article|Python syntax and semantics}}\n\nPython is intended to be a highly readable language. It is designed to have an uncluttered visual layout, often using English keywords where other languages use punctuation. Further, Python has fewer syntactic exceptions and special cases than [[C (programming language)|C]] or [[Pascal (programming language)|Pascal]].<ref name="AutoNT-52" />\n\n=== Indentation ===\n{{Main article|Python syntax and semantics#Indentation}}\n\nPython uses [[whitespace character|whitespace]] indentation, rather than [[curly bracket programming language|curly braces]] or keywords, to delimit [[block (programming)|blocks]]; this feature is also termed the [[off-side rule]]. An increase in indentation comes after certain statements; a decrease in indentation signifies the end of the current block.<ref name="AutoNT-53" />\n\n=== Statements and control flow ===\nPython\'s [[Statement (computer science)|statements]] include (among others):\n\n* The assignment statement (token \'=\', the equals sign). This operates differently than in traditional [[imperative programming]] languages, and this fundamental mechanism (including the nature of Python\'s version of \'\'variables\'\') illuminates many other features of the language. Assignment in [[C (programming language)|C]], e.g., <code>x = 2</code>, translates to "typed variable name x receives a copy of numeric value 2". The (right-hand) value is copied into an [[Memory management#ALLOCATION|allocated storage location]] for which the (left-hand) [[Variable (computer science)|variable name]] is the symbolic address. The memory allocated to the variable is large enough (potentially quite large) for the declared [[Type system|type]]. In the simplest case of Python assignment, using the same example, <code>x = 2</code>, translates to "(generic) name x receives a [[Pointer (computer programming)|reference]] to a separate, dynamically allocated [[Object (computer science)|object]] of numeric (int) type of value 2." This is termed \'\'binding\'\' the name to the object. Since the name\'s storage location doesn\'t \'\'contain\'\' the indicated value, it is improper to call it a \'\'variable\'\'. Names may be subsequently rebound at any time to objects of greatly varying types, including strings, procedures, complex objects with data and methods, etc. Successive assignments of a common value to multiple names, e.g., <code>x = 2</code>; <code>y = 2</code>; <code>z = 2</code> result in allocating storage to (at most) three names and one numeric object, to which all three names are bound. Since a name is a generic reference holder it is unreasonable to associate a fixed [[Type system|data type]] with it. However at a given time a name will be bound to \'\'some\'\' object, which \'\'\'will\'\'\' have a type; thus there is [[Dynamic type|dynamic typing]].\n* The <code>[[if-then-else|if]]</code> statement, which conditionally executes a block of code, along with <code>else</code> and <code>elif</code> (a contraction of else-if).\n* The <code>[[Foreach#Python|for]]</code> statement, which iterates over an iterable object, capturing each element to a local variable for use by the attached block.\n* The <code>[[While loop#Python|while]]</code> statement, which executes a block of code as long as its condition is true.\n* The <code>[[Exception handling syntax#Python|try]]</code> statement, which allows exceptions raised in its attached code block to be caught and handled by <code>except</code> clauses; it also ensures that clean-up code in a <code>finally</code> block will always be run regardless of how the block exits.\n* The <code>class</code> statement, which executes a block of code and attaches its local namespace to a [[class (computer science)|class]], for use in [[object-oriented programming]].\n* The <code>def</code> statement, which defines a [[function (computing)|function]] or [[method (computing)|method]].\n* The <code>with</code> statement (from Python 2.5), which encloses a code block within a context manager (for example, acquiring a [[lock (computer science)|lock]] before the block of code is run and releasing the lock afterwards, or opening a [[Computer file|file]] and then closing it), allowing [[Resource Acquisition Is Initialization]] (RAII)-like behavior.\n* The <code>pass</code> statement, which serves as a [[NOP]]. It is syntactically needed to create an empty code block.\n* The <code>[[assertion (programming)|assert]]</code> statement, used during debugging to check for conditions that ought to apply.\n* The <code>yield</code> statement, which returns a value from a [[generator (computer science)#Python|generator]] function. From Python 2.5, <code>yield</code> is also an operator. This form is used to implement [[coroutine]]s.\n* The <code>import</code> statement, which is used to import modules whose functions or variables can be used in the current program.\n* The <code>print</code> statement was changed to the <code>print()</code> function in Python 3.<ref name="diff_py2-3">{{cite book|last=Sweigart|first=Al|year=2010|chapter=Appendix A: Differences Between Python 2 and 3|title=Invent Your Own Computer Games with Python|url=http://inventwithpython.com/appendixa.html|edition=2|isbn=978-0-9821060-1-3|accessdate=20 February 2014}}</ref>\n\nPython does not support [[tail call]] optimization or [[first-class continuations]], and, according to Guido van Rossum, it never will.<ref name="AutoNT-55" /><ref name="AutoNT-56" /> However, better support for [[coroutine]]-like functionality is provided in 2.5, by extending Python\'s [[generator (computer science)|generators]].<ref name="AutoNT-57" /> Before 2.5, generators were [[lazy evaluation|lazy]] [[iterator]]s; information was passed unidirectionally out of the generator. As of Python 2.5, it is possible to pass information back into a generator function, and as of Python 3.3, the information can be passed through multiple stack levels.<ref name="AutoNT-58" />\n\n=== Expressions ===\nSome Python [[Expression (computer science)|expressions]] are similar to languages such as [[C (programming language)|C]] and [[Java (programming language)|Java]], while some are not:\n\n* Addition, subtraction, and multiplication are the same, but the behavior of division differs (see [[#Mathematics|Mathematics]] for details). Python also added the <code>**</code> operator for exponentiation.\n* As of Python 3.5, it supports matrix multiplication directly with the <code>@</code> operator, versus C and Java, which implement these as library functions. Earlier versions of Python also used methods instead of an infix operator.<ref name=PEP465>{{cite web|title=PEP 0465 -- A dedicated infix operator for matrix multiplication|url=https://www.python.org/dev/peps/pep-0465/|website=python.org|accessdate=1 January 2016}}</ref><ref name=Python3.5Changelog>{{cite web|title=Python 3.5.1 Release and Changelog|url=https://www.python.org/downloads/release/python-351/|website=python.org|accessdate=1 January 2016}}</ref>\n* In Python, <code>==</code> compares by value, versus Java, which compares numerics by value<ref>http://docs.oracle.com/javase/specs/jls/se8/html/jls-15.html#jls-15.21.1</ref> and objects by reference.<ref>http://docs.oracle.com/javase/specs/jls/se8/html/jls-15.html#jls-15.21.3</ref> (Value comparisons in Java on objects can be performed with the <code>equals()</code> method.) Python\'s <code>is</code> operator may be used to compare object identities (comparison by reference). In Python, comparisons may be chained, for example <code>a <= b <= c</code>. \n* Python uses the words <code>and</code>, <code>or</code>, <code>not</code> for its boolean operators rather than the symbolic <code>&&</code>, <code>||</code>, <code>!</code> used in Java and C.\n* Python has a type of expression termed a \'\'[[list comprehension#Python|list comprehension]]\'\'. Python 2.4 extended list comprehensions into a more general expression termed a \'\'[[generator (computer science)|generator]] expression\'\'.<ref name="AutoNT-59" />\n* [[Anonymous function]]s are implemented using [[Lambda (programming)|lambda expressions]]; however, these are limited in that the body can only be one expression.\n* Conditional expressions in Python are written as <code>x if c else y</code><ref name="AutoNT-60" /> (different in order of operands from the <code>[[?:|c ? x : y]]</code> operator common to many other languages).\n* Python makes a distinction between [[list (computer science)|lists]] and [[tuple]]s. Lists are written as <code>[1, 2, 3]</code>, are mutable, and cannot be used as the keys of dictionaries (dictionary keys must be [[immutable]] in Python). Tuples are written as <code>(1, 2, 3)</code>, are immutable and thus can be used as the keys of dictionaries, provided all elements of the tuple are immutable. The parentheses around the tuple are optional in some contexts. Tuples can appear on the left side of an equal sign; hence a statement like <code>x, y = y, x</code> can be used to swap two variables.\n* Python has a "string format" operator <code>%</code>. This functions analogous to <code>[[printf]]</code> format strings in [[C (programming language)|C]], e.g. <code>"spam=%s eggs=%d" % ("blah", 2)</code> evaluates to <code>"spam=blah eggs=2"</code>. In Python 3 and 2.6+, this was supplemented by the <code>format()</code> method of the <code>str</code> class, e.g. <code>"spam={0} eggs={1}".format("blah", 2)</code>.\n* Python has various kinds of [[string literal]]s:\n** Strings delimited by single or double quote marks. Unlike in [[Unix shell]]s, [[Perl]] and Perl-influenced languages, single quote marks and double quote marks function identically. Both kinds of string use the backslash (<code></code>) as an [[escape character]] and there is no implicit [[string interpolation]] such as <code>"$spam"</code>.\n** Triple-quoted strings, which begin and end with a series of three single or double quote marks. They may span multiple lines and function like [[here document]]s in shells, Perl and [[Ruby (programming language)|Ruby]].\n** [[Raw string]] varieties, denoted by prefixing the string literal with an <code>r</code>. No escape sequences are interpreted; hence raw strings are useful where literal backslashes are common, such as [[regular expression]]s and [[Microsoft Windows|Windows]]-style paths. Compare "<code>@</code>-quoting" in [[C Sharp (programming language)|C#]].\n* Python has [[array index]] and [[array slicing]] expressions on lists, denoted as <code>a[key]</code>, <code>a[start:stop]</code> or <code>a[start:stop:step]</code>. Indexes are [[zero-based]], and negative indexes are relative to the end. Slices take elements from the \'\'start\'\' index up to, but not including, the \'\'stop\'\' index. The third slice parameter, called \'\'step\'\' or \'\'stride\'\', allows elements to be skipped and reversed. Slice indexes may be omitted, for example <code>a[:]</code> returns a copy of the entire list. Each element of a slice is a [[shallow copy]].\n\nIn Python, a distinction between expressions and statements is rigidly enforced, in contrast to languages such as [[Common Lisp]], [[Scheme (programming language)|Scheme]], or [[Ruby (programming language)|Ruby]]. This leads to duplicating some  functionality. For example:\n\n* [[List comprehensions]] vs. <code>for</code>-loops\n* [[Conditional (programming)|Conditional]] expressions vs. <code>if</code> blocks\n* The <code>eval()</code> vs. <code>exec()</code> built-in functions (in Python 2, <code>exec</code> is a statement); the former is for expressions, the latter is for statements.\n\nStatements cannot be a part of an expression, so list and other comprehensions or [[Lambda (programming)|lambda expressions]], all being expressions, cannot contain statements. A particular case of this is that an assignment statement such as <code>a = 1</code> cannot form part of the conditional expression of a conditional statement. This has the advantage of avoiding a classic C error of mistaking an assignment operator <code>=</code> for an equality operator <code>==</code> in conditions: <code>if (c = 1) { ... }</code> is valid C code but <code>if c = 1: ...</code> causes a syntax error in Python.\n\n=== Methods ===\n[[Method (programming)|Methods]] on objects are [[function (programming)|functions]] attached to the object\'s class; the syntax <code>instance.method(argument)</code> is, for normal methods and functions, [[syntactic sugar]] for <code>Class.method(instance, argument)</code>. Python methods have an explicit <code>[[this (computer programming)|self]]</code> parameter to access [[instance data]], in contrast to the implicit <code>self</code> (or <code>this</code>) in some other object-oriented programming languages (e.g., [[C++]], [[Java (programming language)|Java]], [[Objective-C]], or [[Ruby (programming language)|Ruby]]).<ref name="AutoNT-61" />\n\n=== Typing ===\nPython uses [[duck typing]] and has typed objects but untyped variable names. Type constraints are not checked at [[compile time]]; rather, operations on an object may fail, signifying that the given object is not of a suitable type. Despite being [[Type system#Dynamic type checking and runtime type information|dynamically typed]], Python is [[strongly typed programming language|strongly typed]], forbidding operations that are not well-defined (for example, adding a number to a string) rather than silently attempting to make sense of them.\n\nPython allows programmers to define their own types using [[class (computer science)|classes]], which are most often used for [[object-oriented programming]]. New [[object (computer science)|instances]] of classes are constructed by calling the class (for example, <code>SpamClass()</code> or <code>EggsClass()</code>), and the classes are instances of the [[metaclass]] <code>type</code> (itself an instance of itself), allowing [[metaprogramming]] and [[reflection (computer science)|reflection]].\n\nBefore version 3.0, Python had two kinds of classes: \'\'old-style\'\' and \'\'new-style\'\'.<ref name="classy" /> Old-style classes were eliminated in Python 3.0, making all classes new-style. In versions between 2.2 and 3.0, both kinds of classes could be used. The syntax of both styles is the same, the difference being whether the class <code>object</code> is inherited from, directly or indirectly (all new-style classes inherit from <code>object</code> and are instances of <code>type</code>).\n\n{|class="wikitable"\n|+Summary of Python 3\'s built-in types\n|-\n! Type\n! Mutable\n! Description\n! Syntax example\n|-\n| <code>str</code>\n| [[Immutable object|Immutable]]\n| A [[character string]]: sequence of Unicode codepoints\n| <code>\'Wikipedia\'</code><br><code>"Wikipedia"</code><br><code>"""Spanning<br>multiple<br>lines"""</code>\n|-\n| <code>bytearray</code>\n| Mutable\n| Sequence of [[byte]]s\n| <code>bytearray(b\'Some ASCII\')</code><br><code>bytearray(b"Some ASCII")</code><br><code>bytearray([119, 105, 107, 105])</code>\n|-\n| <code>bytes</code>\n| Immutable\n| Sequence of bytes\n| <code>b\'Some ASCII\'</code><br><code>b"Some ASCII"</code><br><code>bytes([119, 105, 107, 105])</code>\n|-\n| <code>list</code>\n| Mutable\n| [[list (computer science)|List]], can contain mixed types\n| <code>[4.0, \'string\', True]</code>\n|-\n| <code>tuple</code>\n| Immutable\n| Can contain mixed types\n| <code>(4.0, \'string\', True)</code>\n|-\n| <code>set</code>\n| Mutable\n| Unordered [[set (computer science)|set]], contains no duplicates; can contain mixed types if hashable\n| <code>{4.0, \'string\', True}</code>\n|-\n| <code>frozenset</code>\n| Immutable\n| Unordered [[set (computer science)|set]], contains no duplicates; can contain mixed types if hashable\n| <code>frozenset([4.0, \'string\', True])</code>\n|-\n| <code>dict</code>\n| Mutable\n| [[Associative array]] (or dictionary) of key and value pairs; can contain mixed types (keys and values), keys must be a hashable type\n| <code>{\'key1\': 1.0, 3: False}</code>\n|-\n| <code>int</code>\n| Immutable\n| [[integer (computer science)|Integer]] of unlimited magnitude<ref name="pep0237" />\n| <code>42</code>\n|-\n| <code>float</code>\n| Immutable\n| [[Floating point]] number, system-defined precision\n| <code>3.1415927</code>\n|-\n| <code>complex</code>\n| Immutable\n| [[Complex number]] with real and imaginary parts\n| <code>3+2.7j</code>\n|-\n| <code>bool</code>\n| Immutable\n| [[Boolean value]]\n| <code>True</code><br><code>False</code>\n|-\n| <code>ellipsis</code>\n| \n| An [[Ellipsis (programming operator)|ellipsis]] placeholder to be used as an index in [[NumPy]] arrays\n| <code>...</code>\n|}\n\n=== Mathematics ===\nPython has the usual C arithmetic operators (<code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>, <code>%</code>). It also has <code>**</code> for exponentiation, e.g. <code>5**3 == 125</code> and <code>9**0.5 == 3.0</code>, and a new matrix multiply <code>@</code> operator is included in version 3.5.<ref>{{cite web|url=http://legacy.python.org/dev/peps/pep-0465/|title=PEP 465 -- A dedicated infix operator for matrix multiplication|work=python.org}}</ref>\n\nThe behavior of division has changed significantly over time:<ref name="pep0238"/>\n\n* Python 2.1 and earlier use the C division behavior. The <code>/</code> operator is integer division if both operands are integers, and floating-point division otherwise. Integer division rounds towards 0, e.g. {{nowrap|1=<code>7 / 3 == 2</code>}} and {{nowrap|1=<code>-7 / 3 == -2</code>.}}\n* Python 2.2 changes integer division to round towards negative infinity, e.g. <code>7 / 3 == 2</code> and <code>-7 / 3 == -3</code>. The floor division <code>//</code> operator is introduced. So <code>7 // 3 == 2</code>, <code>-7 // 3 == -3</code>, <code>7.5 // 3 == 2.0</code> and <code>-7.5 // 3 == -3.0</code>. Adding <code>from __future__ import division</code> causes a module to use Python 3.0 rules for division (see next).\n* Python 3.0 changes <code>/</code> to be always floating-point division. In Python terms, the pre-3.0 <code>/</code> is \'\'classic division\'\', the version-3.0 <code>/</code> is \'\'real division\'\', and <code>//</code> is \'\'floor division\'\'.\n\nRounding towards negative infinity, though different from most languages, adds consistency. For instance, it means that the equation <code>(a+b) // b == a // b + 1</code> is always true. It also means that the equation <code>b * (a // b) + a % b == a</code> is valid for both positive and negative values of <code>a</code>. However, maintaining the validity of this equation means that while the result of <code>a % b</code> is, as expected, in the [[half-open interval]] [0, \'\'b\'\'), where <code>b</code> is a positive integer, it has to lie in the interval (\'\'b\'\', 0] when <code>b</code> is negative.<ref name="AutoNT-62" />\n\nPython provides a <code>round</code> function for [[rounding]] a float to the nearest integer. For [[Rounding#Tie-breaking|tie-breaking]], versions before 3 use round-away-from-zero: <code>round(0.5)</code> is 1.0, <code>round(-0.5)</code> is −1.0.<ref name="AutoNT-63" /> Python 3 uses [[round to even]]: <code>round(1.5)</code> is 2, <code>round(2.5)</code> is 2.<ref name="AutoNT-64" />\n\nPython allows boolean expressions with multiple equality relations in a manner that is consistent with general use in mathematics. For example, the expression <code>a < b < c</code> tests whether <code>a</code> is less than <code>b</code> and <code>b</code> is less than <code>c</code>. C-derived languages interpret this expression differently: in C, the expression would first evaluate <code>a < b</code>, resulting in 0 or 1, and that result would then be compared with <code>c</code>.<ref name="AutoNT-65" />{{Page needed|date=January 2012}}\n\nPython has extensive built-in support for [[arbitrary precision arithmetic]]. Integers are transparently switched from the machine-supported maximum fixed-precision (usually 32 or 64 bits), belonging to the python type <code>int</code>, to arbitrary precision, belonging to the python type <code>long</code>, where needed. The latter have an "L" suffix in their textual representation.<ref>{{cite web|title = Built-in Type|url = https://docs.python.org/2.7/library/stdtypes.html|website = docs.python.org}}</ref> The <code>Decimal</code> type/class in module <code>decimal</code> (since version 2.4) provides decimal floating point numbers to arbitrary precision and several rounding modes.<ref>{{Cite web|title = PEP 0327 -- Decimal Data Type|url = https://www.python.org/dev/peps/pep-0327/|website = Python.org|accessdate = 2015-09-26|last = Batista|first = Facundo}}</ref> The <code>Fraction</code> type in module <code>fractions</code> (since version 2.6) provides arbitrary precision for rational numbers.<ref>{{Cite web|title = What’s New in Python 2.6 — Python v2.6.9 documentation|url = https://docs.python.org/2.6/whatsnew/2.6.html|website = docs.python.org|accessdate = 2015-09-26}}</ref>\n\nDue to Python\'s extensive mathematics library, it is frequently used as a scientific scripting language to aid in problems such as numerical data processing and manipulation.\n\n== Libraries ==\nPython has a large [[standard library]], commonly cited as one of Python\'s greatest strengths,<ref name="AutoNT-86" /> providing tools suited to many tasks. This is deliberate and has been described as a "batteries included"<ref name="About" /> Python philosophy. For Internet-facing applications, many standard formats and protocols (such as [[MIME]] and [[Hypertext Transfer Protocol|HTTP]]) are supported. Modules for creating [[graphical user interface]]s, connecting to [[relational database]]s, [[pseudorandom number generator]]s, arithmetic with arbitrary precision decimals,<ref name="AutoNT-88" /> manipulating [[regular expression]]s, and doing [[unit testing]] are also included.\n\nSome parts of the standard library are covered by specifications (for example, the [[Web Server Gateway Interface]] (WSGI) implementation <code>wsgiref</code> follows PEP 333<ref name="AutoNT-89" />), but most modules are not. They are specified by their code, internal documentation, and test suite (if supplied). However, because most of the standard library is cross-platform Python code, only a few modules need altering or rewriting for variant implementations.\n\nThe standard library is not needed to run Python or embed it in an application. For example, [[Blender (software)|Blender]] 2.49 omits most of the standard library.\n\nAs of January 2016, the [[Python Package Index]], the official repository of third-party software for Python, contains more than 72,000 packages offering a wide range of functionality, including:\n\n* graphical user interfaces, web frameworks, multimedia, databases, networking and communications\n* test frameworks, automation and web scraping, documentation tools, system administration\n* scientific computing, text processing, image processing\n\n== Development environments ==\n{{See also|Comparison of integrated development environments#Python}}\nMost Python implementations (including CPython) can function as a [[command line interpreter]], for which the user enters statements sequentially and receives the results immediately ([[read–eval–print loop]] (REPL)). In short, Python acts as a [[command-line interface]] or [[Shell (computing)|shell]].\n\nOther shells add abilities beyond those in the basic interpreter, including [[IDLE (Python)|IDLE]] and [[IPython]]. While generally following the visual style of the Python shell, they implement features like auto-completion, session state retention, and syntax highlighting.\n\nIn addition to standard desktop [[integrated development environment]]s ([[Python IDE]]s), there are also [[web browser]]-based IDEs, [[Sage (mathematics software)|Sage]] (intended for developing science and math-related Python programs), and a browser-based IDE and hosting environment, [[PythonAnywhere]].\n\n== Implementations ==\n{{See also|List of Python software#Python implementations}}\n\nThe main Python implementation, named [[CPython]], is written in [[C (programming language)|C]] meeting the [[C89 (C version)|C89]] standard.<ref name="AutoNT-66" /> It compiles Python programs into intermediate [[bytecode]],<ref name="AutoNT-67" /> which is executed by the [[virtual machine]].<ref name="AutoNT-68" /> CPython is distributed with a large standard library written in a mixture of C and Python. It is available in versions for many platforms, including [[Microsoft Windows|Windows]] and most modern [[Unix-like]] systems. CPython was intended from almost its very conception to be cross-platform.<ref name="AutoNT-69" />\n\n[[PyPy]] is a fast, compliant<ref name="AutoNT-70" /> interpreter of Python 2.7 and 3.2. Its [[Just-in-time compilation|just-in-time compiler]] brings a significant speed improvement over CPython.<ref name="AutoNT-71" /> A version taking advantage of [[multi-core processor]]s using [[software transactional memory]] is being created.<ref name="AutoNT-72" />\n\n[[Stackless Python]] is a significant fork of CPython that implements [[microthread]]s; it does not use the C memory stack, thus allowing massively concurrent programs. PyPy also has a stackless version.<ref name="AutoNT-73" />\n\n[[MicroPython]] is a lean, fast Python 3 variant that is optimised to run on [[microcontroller]]s.\n\nOther just-in-time compilers have been developed in the past, but are now unsupported:\n\n* Google began a project named [[Unladen Swallow]] in 2009 with the aims of speeding up the Python interpreter by 5 times, by using the [[LLVM]], and of improving its multithreading ability to scale to thousands of cores.<ref name="AutoNT-74" />\n* [[Psyco]] is a [[Just-in-time compilation|just-in-time]] [[Run-time algorithm specialisation|specialising]] compiler that integrates with CPython and transforms bytecode to machine code at runtime. The emitted code is specialised for certain [[data type]]s and is faster than standard Python code.\n\nIn 2005, [[Nokia]] released a Python interpreter for the [[Series 60]] mobile phones named [[PyS60]]. It includes many of the modules from the CPython implementations and some added modules to integrate with the [[Symbian]] operating system. This project has been kept up to date to run on all variants of the S60 platform and there are several third party modules available. The Nokia [[N900]] also supports Python with [[GTK]] widget libraries, with the feature that programs can be both written and run on the target device.<ref>{{cite web|title=Python on the Nokia N900|url=http://www.stochasticgeometry.ie/2010/04/29/python-on-the-nokia-n900/|website=Stochastic Geometry}}</ref>\n\nThere are several compilers to high-level [[object language]]s, with either unrestricted Python, a restricted subset of Python, or a language similar to Python as the source language:\n\n* [[Jython]] compiles into Java byte code, which can then be executed by every [[Java virtual machine]] implementation. This also enables the use of Java class library functions from the Python program.\n* [[IronPython]] follows a similar approach in order to run Python programs on the .NET [[Common Language Runtime]].\n* The [[RPython]] language can be compiled to [[C (programming language)|C]], [[Java bytecode]], or [[Common Intermediate Language]], and is used to build the PyPy interpreter of Python.\n* [[Pyjamas (software)|Pyjamas]] compiles Python to [[JavaScript]].\n* [[Shed Skin]] compiles Python to [[C++]].\n* [[Cython]] and [[Pyrex (programming language)|Pyrex]] compile to [[C (programming language)|C]].\n\nA performance comparison of various Python implementations on a non-numerical (combinatorial) workload was presented at EuroSciPy \'13.<ref>{{cite conference |title=Performance of Python runtimes on a non-numeric scientific code |last=Murri |first=Riccardo |conference=European Conference on Python in Science (EuroSciPy) |year=2013 |arxiv=1404.6388}}</ref>\n\n== Development ==\nPython\'s development is conducted largely through the \'\'\'Python Enhancement Proposal\'\'\' (PEP) process. The PEP process is the primary mechanism for proposing major new features, for collecting community input on an issue, and for documenting the design decisions that have gone into Python.<ref name="PepCite000" /> Outstanding PEPs are reviewed and commented upon by the Python community and by Van Rossum, the Python project\'s [[benevolent dictator for life]].<ref name="PepCite000" />\n\nEnhancement of the language goes along with development of the CPython reference implementation. The mailing list python-dev is the primary forum for discussion about the language\'s development; specific issues are discussed in the [[Roundup (issue tracker)|Roundup]] [[bug tracker]] maintained at python.org.<ref name="AutoNT-21" /> Development takes place on a [[self-hosted]] source code repository running [[Mercurial]].<ref name=py_dev_guide>{{cite web|title=Python Developer\'s Guide|url=https://docs.python.org/devguide/}}</ref>\n\nCPython\'s public releases come in three types, distinguished by which part of the version number is incremented:\n\n* Backwards-incompatible versions, where code is expected to break and must be manually [[ported]]. The first part of the version number is incremented. These releases happen infrequently—for example, version 3.0 was released 8 years after 2.0.\n* Major or "feature" releases, which are largely compatible but introduce new features. The second part of the version number is incremented. These releases are scheduled to occur roughly every 18 months, and each major version is supported by bugfixes for several years after its release.<ref name="release-schedule" />\n* Bugfix releases, which introduce no new features but fix bugs. The third and final part of the version number is incremented. These releases are made whenever a sufficient number of bugs have been fixed upstream since the last release, or roughly every 3 months. Security vulnerabilities are also patched in bugfix releases.<ref name="AutoNT-22" />\n\nMany [[beta release|alpha, beta, and release-candidates]] are also released as previews, and for testing before final releases. Although there is a rough schedule for each release, this is often pushed back if the code is not ready. The development team monitors the state of the code by running the large [[unit test]] suite during development, and using the [[BuildBot]] [[continuous integration]] system.<ref name="AutoNT-23" />\n\nThe community of Python developers has also contributed over 72,000 software modules (as of January 2016) to the [[Python Package Index]] (PyPI), the official repository of third-party libraries for Python.\n\nThe major [[academic conference]] on Python is named [[PyCon]]. There are special mentoring programmes like the [[Pyladies]].\n\n== Naming ==\nPython\'s name is derived from the television series \'\'[[Monty Python\'s Flying Circus]]\'\',<ref name="AutoNT-24" /> and it is common to use Monty Python references in example code.<ref name="tutorial-chapter1" /> For example, the [[metasyntactic variable]]s often used in Python literature are [[Spam (Monty Python)|\'\'spam\'\' and \'\'eggs\'\']], instead of the traditional [[foobar|\'\'foo\'\' and \'\'bar\'\']].<ref name="tutorial-chapter1" /><ref name="AutoNT-26" /> Also, the official Python documentation often contains various obscure Monty Python references.\n\nThe prefix \'\'Py-\'\' is used to show that something is related to Python. Examples of the use of this prefix in names of Python applications or libraries include [[Pygame]], a [[language binding|binding]] of [[Simple DirectMedia Layer|SDL]] to Python (commonly used to create games); [[PyS60]], an implementation for the [[Symbian]] [[S60 (software platform)|S60]] operating system; [[PyQt]] and [[PyGTK]], which bind [[Qt (software)|Qt]] and [[GTK]], respectively, to Python; and [[PyPy]], a Python implementation originally written in Python.\n\n== Uses ==\n{{Main article|List of Python software}}\n\nSince 2003, Python has consistently ranked in the top ten most popular programming languages as measured by the [[TIOBE Programming Community Index]]. As of June 2016, it is the fourth most popular language.<ref>http://www.tiobe.com/index.php/content/paperinfo/tpci/index.html</ref> It was ranked as Programming Language of the Year for the year 2007 and 2010.<ref name="AutoNT-34" /> It is the third most popular language whose [[Syntax (programming languages)|grammatical syntax]] is not predominantly based on [[C (programming language)|C]], e.g. C++, Objective-C (note, C# and Java only have partial syntactic similarity to C, such as the use of curly braces, and are closer in similarity to each other than C).\n\nAn empirical study found scripting languages (such as Python) more productive than conventional languages (such as C and Java) for a programming problem involving string manipulation and search in a dictionary. Memory consumption was often "better than Java and not much worse than C or C++".<ref name="AutoNT-28" />\n\nLarge organizations that make use of Python include [[Google]],<ref name="quotes-about-python" /> [[Yahoo!]],<ref name="AutoNT-29" /> [[CERN]],<ref name="AutoNT-30" /> [[NASA]],<ref name="AutoNT-31" /> and some smaller ones like [[Industrial Light & Magic|ILM]],<ref name="AutoNT-32" /> and [[ITA Software|ITA]].<ref name="AutoNT-33" /> The social news networking site, [[Reddit]], is written entirely in Python.\n\nPython can serve as a [[scripting language]] for [[web application]]s, e.g., via [[mod_wsgi]] for the [[Apache web server]].<ref name="AutoNT-35" /> With [[Web Server Gateway Interface]], a standard API has evolved to facilitate these applications. [[Web framework]]s like [[Django (web framework)|Django]], [[Pylons (web framework)|Pylons]], [[Pyramid (web framework)|Pyramid]], [[TurboGears]], [[web2py]], [[Tornado (web server)|Tornado]], [[Flask (web framework)|Flask]], [[Bottle (web framework)|Bottle]] and [[Zope]] support developers in the design and maintenance of complex applications. [[Pyjamas (software)|Pyjamas]] and [[IronPython]] can be used to develop the client-side of Ajax-based applications. [[SQLAlchemy]] can be used as [[Data mapper pattern|data mapper]] to a relational database. [[Twisted (software)|Twisted]] is a framework to program communications between computers, and is used (for example) by [[Dropbox (service)|Dropbox]].\n\nLibraries like [[NumPy]], [[SciPy]] and [[Matplotlib]] allow the effective use of Python in scientific computing,<ref name="cise">{{cite journal |last=Oliphant |first=Travis |title=Python for Scientific Computing |journal=Computing in Science and Engineering |year=2007 |url=https://www.h2desk.com/blog/python-scientific-computing/}}</ref><ref name="millman">{{cite journal |first1=K. Jarrod |last1=Millman |first2=Michael |last2=Aivazis |title=Python for Scientists and Engineers |journal=Computing in Science and Engineering |volume=13 |number=2 |pages=9–12 |year=2011 |url=http://www.computer.org/csdl/mags/cs/2011/02/mcs2011020009.html}}</ref> with specialized libraries such as [[BioPython]] and [[Astropy]] providing domain-specific functionality. [[Sage (mathematics software)|Sage]] is a [[mathematical software]] with a "[[Electronic Notebook|notebook]]" programmable in Python: its library covers many aspects of [[mathematics]], including [[algebra]], [[combinatorics]], [[numerical mathematics]], [[number theory]], and [[calculus]].\n\nPython has been successfully embedded in many software products as a scripting language, including in [[finite element method]] software such as [[Abaqus]], 3D parametric modeler like [[FreeCAD]], 3D animation packages such as [[3ds Max]], [[Blender (software)|Blender]], [[Cinema 4D]], [[Lightwave]], [[Houdini (software)|Houdini]], [[Maya (software)|Maya]], [[modo (software)|modo]], [[MotionBuilder]], [[Autodesk Softimage|Softimage]], the visual effects compositor [[Nuke (software)|Nuke]], 2D imaging programs like [[GIMP]],<ref>{{cite web |url= http://gimp-win.sourceforge.net/faq.html|title=Installers for GIMP for Windows - Frequently Asked Questions |author=<!-- Staff writer(s); no by-line. --> |date=26 July 2013 |accessdate=26 July 2013}}</ref> [[Inkscape]], [[Scribus]] and [[Paint Shop Pro]],<ref name="AutoNT-38" /> and [[musical notation]] program or [[scorewriter]] [[Capella (notation program)|capella]]. [[GNU Debugger]] uses Python as a [[Prettyprint|pretty printer]] to show complex structures such as C++ containers. [[Esri]] promotes Python as the best choice for writing scripts in [[ArcGIS]].<ref name="AutoNT-39" /> It has also been used in several video games,<ref name="AutoNT-40" /><ref name="AutoNT-41" /> and has been adopted as first of the three available [[programming language]]s in [[Google App Engine]], the other two being [[Java (software platform)|Java]] and [[Go (programming language)|Go]].<ref name="AutoNT-42" />\n\nPython has been used in [[artificial intelligence]] tasks.<ref name="AutoNT-43" /><ref name="AutoNT-44" /><ref name="AutoNT-45" /><ref name="AutoNT-46" /> As a scripting language with module architecture, simple syntax and rich text processing tools, Python is often used for [[natural language processing]] tasks.<ref name="AutoNT-47" />\n\nMany operating systems include Python as a standard component; the language ships with most [[Linux distribution]]s, [[AmigaOS 4]], [[FreeBSD]], [[NetBSD]], [[OpenBSD]] and [[OS X]], and can be used from the terminal. Many Linux distributions use installers written in Python: [[Ubuntu (operating system)|Ubuntu]] uses the [[Ubiquity (software)|Ubiquity]] installer, while [[Red Hat Linux]] and [[Fedora (operating system)|Fedora]] use the [[Anaconda (installer)|Anaconda]] installer. [[Gentoo Linux]] uses Python in its [[package management system]], [[Portage (software)|Portage]].\n\nPython has also seen extensive use in the [[information security]] industry, including in exploit development.<ref name="AutoNT-49" /><ref name="AutoNT-50" />\n\nMost of the [[Sugar (software)|Sugar]] software for the [[One Laptop per Child]] XO, now developed at [[Sugar Labs]], is written in Python.<ref name="AutoNT-51" />\n\nThe [[Raspberry Pi]] [[single-board computer]] project has adopted Python as its main user-programming language.\n\n[[LibreOffice]] includes Python and intends to replace Java with Python. Python Scripting Provider is a core feature<ref>{{cite web |title=4.0 New Features and Fixes |publisher=[[The Document Foundation]] |work=LibreOffice.org |year=2013 |url=http://www.libreoffice.org/download/4-0-new-features-and-fixes/ |accessdate=25 February 2013}}</ref> since Version 4.0 from 7 February 2013.\n\n== Languages influenced by Python ==\nPython\'s design and philosophy have influenced several programming languages, including:\n\n* [[Boo (programming language)|Boo]] uses indentation, a similar syntax, and a similar object model. However, Boo uses [[static typing]] (and optional [[duck typing]]) and is closely integrated with the [[.NET Framework]].<ref name="AutoNT-90" />\n* [[Cobra (programming language)|Cobra]] uses indentation and a similar syntax. Cobra\'s "Acknowledgements" document lists Python first among languages that influenced it.<ref name="AutoNT-91" /> However, Cobra directly supports [[Design by contract|design-by-contract]], [[Unit testing|unit tests]], and optional [[static typing]].<ref name="AutoNT-92" />\n* [[ECMAScript]] borrowed [[iterator]]s, [[generator (computer science)|generators]], and [[list comprehension]]s from Python.<ref name="AutoNT-93" />\n* [[Go (programming language)|Go]] is described as incorporating the "development speed of working in a dynamic language like Python".<ref name="AutoNT-94" />\n* [[Groovy (programming language)|Groovy]] was motivated by the desire to bring the Python design philosophy to [[Java (programming language)|Java]].<ref name="AutoNT-95" />\n* [[Julia (programming language)|Julia]] was designed "with [[hygienic macro|true macros]] [.. and to be] as usable for general programming as Python<!--, as easy for statistics as R, as natural for string processing as Perl, as powerful for linear algebra as Matlab, as good at gluing programs together as the shell. Something that is dirt simple to learn, yet keeps the most serious hackers happy. We want it interactive and we want it compiled.\n\n(Did we mention it --> [and] should be as fast as C<!--?-->".<ref name=Julia>{{cite web| title = Why We Created Julia| date= February 2012| website= Julia website| url= http://julialang.org/blog/2012/02/why-we-created-julia| accessdate= 5 June 2014}}</ref> Calling to or from Julia is possible; to with [https://github.com/stevengj/PyCall.jl PyCall.jl] and a Python package [https://github.com/JuliaLang/pyjulia pyjulia] allows calling, in the other direction, from Python.\n* [[OCaml]] has an optional syntax, named twt (The Whitespace Thing), inspired by Python and [[Haskell (programming language)|Haskell]].<ref name="AutoNT-96" />\n* [[Ruby (programming language)|Ruby]]\'s creator, [[Yukihiro Matsumoto]], has said: "I wanted a scripting language that was more powerful than Perl, and more object-oriented than Python. That\'s why I decided to design my own language."<ref name="linuxdevcenter" />\n* [[CoffeeScript]] is a programming language that cross-compiles to JavaScript; it has Python-inspired syntax.\n* [[Swift (programming language)|Swift]] is a programming language invented by Apple; it has some Python-inspired syntax.<ref>{{cite web |url=http://nondot.org/sabre |title=Chris Lattner\'s Homepage |publisher=Chris Lattner |first=Chris |last=Lattner |authorlink=Chris Lattner |date=3 June 2014 |accessdate=3 June 2014 |quote=I started work on the Swift Programming Language in July of 2010. I implemented much of the basic language structure, with only a few people knowing of its existence. A few other (amazing) people started contributing in earnest late in 2011, and it became a major focus for the Apple Developer Tools group in July 2013 [...] drawing ideas from Objective-C, Rust, Haskell, Ruby, Python, C#, CLU, and far too many others to list.}}</ref>\n\nPython\'s development practices have also been emulated by other languages. The practice of requiring a document describing the rationale for, and issues surrounding, a change to the language (in Python\'s case, a PEP) is also used in [[Tcl]]<ref name="AutoNT-99" /> and [[Erlang (programming language)|Erlang]]<ref name="AutoNT-100" /> because of Python\'s influence.\n\nPython has been awarded a TIOBE Programming Language of the Year award twice (in 2007 and 2010), which is given to the language with the greatest growth in popularity over the course of a year, as measured by the [[TIOBE index]].<ref name="AutoNT-101" />\n\n== See also ==\n{{Portal|Free software|Python programming}}\n* [[IPython]]\n* [[Comparison of integrated development environments#Python|Comparison of integrated development environments for Python]]\n* [[Comparison of programming languages]]\n* [[List of programming languages]]\n* [[Off-side rule#Off-side rule languages|Off-side rule languages]], where blocks are expressed by indentation\n* [[Python for S60]]\n* [[Cython]]\n* [[LAMP (software bundle)]]\n* [[LEAP (software bundle)]]\n\n== References ==\n{{Reflist|30em|refs=\n<ref name="faq-created">{{cite web |url=https://docs.python.org/faq/general.html#why-was-python-created-in-the-first-place |title=Why was Python created in the first place? |work=General Python FAQ |publisher=Python Software Foundation |accessdate=22 March 2007}}</ref>\n<ref name="98-interview">{{cite web |url=http://www.amk.ca/python/writing/gvr-interview |title=Interview with Guido van Rossum (July 1998) |last=Kuchling |first=Andrew M. |work=amk.ca |date=22 December 2006 |accessdate=12 March 2012}}</ref>\n<ref name="AutoNT-1">{{ cite journal |last=van Rossum |first=Guido |year=1993 |title=An Introduction to Python for UNIX/C Programmers |journal=Proceedings of the NLUUG najaarsconferentie (Dutch UNIX users group) |quote=even though the design of C is far from ideal, its influence on Python is considerable. |url=http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.38.2023}}</ref>\n<ref name="classmix">{{cite web |url=https://docs.python.org/tutorial/classes.html |title=Classes |work=The Python Tutorial |publisher=Python Software Foundation |accessdate=20 February 2012 |quote=It is a mixture of the class mechanisms found in C++ and Modula-3}}</ref>\n<ref name="AutoNT-2">{{cite web |url=https://www.python.org/download/releases/2.3/mro/ |title=The Python 2.3 Method Resolution Order |last=Simionato |first=Michele |publisher=Python Software Foundation |quote=The C3 method itself has nothing to do with Python, since it was invented by people working on Dylan and it is described in a paper intended for lispers}}</ref>\n<ref name="AutoNT-3">{{cite web |url=https://docs.python.org/howto/functional.html |title=Functional Programming HOWTO |last=Kuchling |first=A. M. |work=Python v2.7.2 documentation |publisher=Python Software Foundation |accessdate=9 February 2012}}</ref>\n<ref name="pep0238">{{cite web |url=https://www.python.org/dev/peps/pep-0238/ |title=PEP 238&nbsp;– Changing the Division Operator |first1=Moshe |last1=Zadka |first2=Guido |last2=van Rossum |date=11 March 2001 |work=Python Enhancement Proposals |publisher=Python Software Foundation |accessdate=23 October 2013}}</ref>\n<ref name="AutoNT-4">{{cite web |url=https://www.python.org/dev/peps/pep-0255/ |title=PEP 255&nbsp;– Simple Generators |first1=Neil |last1=Schemenauer |first2=Tim |last2=Peters |first3=Magnus Lie |last3=Hetland |date=18 May 2001 |work=Python Enhancement Proposals |publisher=Python Software Foundation |accessdate=9 February 2012}}</ref>\n<ref name="AutoNT-5">{{cite web |url=https://www.python.org/dev/peps/pep-0318/ |title=PEP 318&nbsp;– Decorators for Functions and Methods |first1=Kevin D. |last1=Smith |first2=Jim J. |last2=Jewett |first3=Skip |last3=Montanaro |first4=Anthony |last4=Baxter |date=2 September 2004 |work=Python Enhancement Proposals |publisher=Python Software Foundation |accessdate=24 February 2012}}</ref>\n<ref name="AutoNT-6">{{cite web |url=https://docs.python.org/3.2/tutorial/controlflow.html |title=More Control Flow Tools |work=Python 3 documentation |publisher=Python Software Foundation |accessdate=24 July 2015}}</ref>\n<ref name="bini">{{ cite book |last=Bini |first=Ola |title=Practical JRuby on Rails Web 2.0 Projects: bringing Ruby on Rails to the Java platform |year=2007 |publisher=APress |location=Berkeley |isbn=978-1-59059-881-8 |page=3}}</ref>\n<ref name="AutoNT-7">{{cite web |last=Kuhlman |first=Dave |url=http://cutter.rexx.com/~dkuhlman/python_book_01.html |title=A Python Book: Beginning Python, Advanced Python, and Python Exercises}}</ref>\n<ref name="About">{{cite web |url=https://www.python.org/about |title=About Python |publisher=Python Software Foundation |accessdate=24 April 2012}}, second section "Fans of Python use the phrase "batteries included" to describe the standard library, which covers everything from asynchronous processing to zip files."</ref>\n<ref name="venners-interview-pt-1">{{cite web |url=http://www.artima.com/intv/pythonP.html |title=The Making of Python |last=Venners |first=Bill |date=13 January 2003 |work=Artima Developer |publisher=Artima |accessdate=22 March 2007}}</ref>\n<ref name="timeline-of-python">{{cite web |url=http://python-history.blogspot.com/2009/01/brief-timeline-of-python.html |title=A Brief Timeline of Python |last=van Rossum |first=Guido |date=20 January 2009 |work=The History of Python |publisher=Google |accessdate=20 January 2009}}</ref>\n<ref name="AutoNT-12">{{ cite mailing list |url=http://mail.python.org/pipermail/python-dev/2000-August/008881.html |title=SETL (was: Lukewarm about range literals) |date=29 August 2000 |accessdate=13 March 2011 |mailinglist=Python-Dev |last=van Rossum |first=Guido |authorlink=Guido van Rossum}}</ref>\n<ref name="newin-2.0">{{cite web |url=https://docs.python.org/whatsnew/2.0.html |title=What\'s New in Python 2.0 |last1=Kuchling |first1=A. M. |last2=Zadka |first2=Moshe |date=16 October 2000 |publisher=Python Software Foundation |accessdate=11 February 2012}}</ref>\n<ref name="3.0-release">{{cite web |url=https://www.python.org/download/releases/3.0/ |title=Python 3.0 Release |publisher=Python Software Foundation |accessdate=8 July 2009}}</ref>\n<ref name="pep-3000">{{cite web |url=https://www.python.org/dev/peps/pep-3000/ |title=PEP 3000&nbsp;– Python 3000 |last=van Rossum |first=Guido |date=5 April 2006 |work=Python Enhancement Proposals |publisher=Python Software Foundation |accessdate=27 June 2009}}</ref>\n<ref name="AutoNT-13">{{cite web |url=https://www.python.org/community/pycon/dc2004/papers/24/metaclasses-pycon.pdf |archiveurl=http://www.webcitation.org/5lubkaJRc |archivedate=10 December 2009 |format=PDF |title=Python Metaclasses: Who? Why? When? |last=The Cain Gang Ltd. |accessdate=27 June 2009}}</ref>\n<ref name="AutoNT-14">{{cite web |url=https://docs.python.org/3.0/reference/datamodel.html#special-method-names |title=3.3. Special method names |work=The Python Language Reference |publisher=Python Software Foundation |accessdate=27 June 2009}}</ref>\n<ref name="AutoNT-15">{{cite web |url=http://www.nongnu.org/pydbc/ |title=PyDBC: method preconditions, method postconditions and class invariants for Python |accessdate=24 September 2011}}</ref>\n<ref name="AutoNT-16">{{cite web |url=http://www.wayforward.net/pycontract/ |title=Contracts for Python |accessdate=24 September 2011}}</ref>\n<ref name="AutoNT-17">{{cite web |url=https://sites.google.com/site/pydatalog/ |title=PyDatalog |accessdate=22 July 2012}}</ref>\n<ref name="AutoNT-18">{{cite web |url=https://docs.python.org/lib/module-itertools.html |title=6.5 itertools&nbsp;– Functions creating iterators for efficient looping |publisher=Docs.python.org |accessdate=24 November 2008}}</ref>\n<ref name="PEP20">{{cite web |url=https://www.python.org/dev/peps/pep-0020/ |title=PEP 20&nbsp;– The Zen of Python |last=Peters |first=Tim |date=19 August 2004 |work=Python Enhancement Proposals |publisher=Python Software Foundation |accessdate=24 November 2008}}</ref>\n<ref name="AutoNT-19">{{cite book | url=http://shop.oreilly.com/product/9780596007973.do | title=Python Cookbook, 2nd Edition | publisher=[[O\'Reilly Media]] |author1=Martelli, Alex |author2=Ravenscroft, Anna |author3=Ascher, David | year=2005 | pages=230 | isbn=978-0-596-00797-3}}</ref>\n<ref name="AutoNT-20">{{cite web|url=http://ebeab.com/2014/01/21/python-culture/|title=Python Culture}}</ref>\n<ref name="PepCite000">{{cite web |url=https://www.python.org/dev/peps/pep-0001/ |title=PEP 1&nbsp;– PEP Purpose and Guidelines |last1=Warsaw |first1=Barry |last2=Hylton |first2=Jeremy |last3=Goodger |first3=David |date=13 June 2000 |work=Python Enhancement Proposals |publisher=Python Software Foundation |accessdate=19 April 2011}}</ref>\n<ref name="AutoNT-21">{{cite web|url=https://www.python.org/dev/intro/ |title=Guido, Some Guys, and a Mailing List: How Python is Developed |last=Cannon |first=Brett |work=python.org |publisher=Python Software Foundation |accessdate=27 June 2009 |deadurl=yes |archiveurl=https://web.archive.org/20090601134342/http://www.python.org:80/dev/intro/ |archivedate=1 June 2009 }}</ref>\n<ref name="release-schedule">{{cite web |url=https://mail.python.org/pipermail/python-dev/2002-April/022739.html |title=&#91;Python-Dev&#93; Release Schedules (was Stability & change) |last=Norwitz |first=Neal |date=8 April 2002 |accessdate=27 June 2009}}</ref>\n<ref name="AutoNT-22">{{cite web |url=https://www.python.org/dev/peps/pep-0006/ |title=PEP 6&nbsp;– Bug Fix Releases |last1=Aahz |last2=Baxter |first2=Anthony |date=15 March 2001 |work=Python Enhancement Proposals |publisher=Python Software Foundation |accessdate=27 June 2009}}</ref>\n<ref name="AutoNT-23">{{cite web |url=https://www.python.org/dev/buildbot/ |title=Python Buildbot |work=Python Developer’s Guide |publisher=Python Software Foundation |accessdate=24 September 2011}}</ref>\n<ref name="AutoNT-24">{{cite web |url=https://docs.python.org/2/faq/general.html#why-is-it-called-python |title=General Python FAQ |work=Python v2.7.3 documentation |publisher=Docs.python.org |date=|accessdate=3 December 2012}}</ref>\n<ref name="tutorial-chapter1">{{cite web |url=https://docs.python.org/tutorial/appetite.html |title=Whetting Your Appetite |work=The Python Tutorial |publisher=Python Software Foundation |accessdate=20 February 2012}}</ref>\n<ref name="AutoNT-25">{{cite web |url=http://python.net/crew/mwh/hacks/objectthink.html |title=How to think like a Pythonista}}</ref>\n<ref name="AutoNT-26">{{cite web |url=https://stackoverflow.com/questions/5033906/in-python-should-i-use-else-after-a-return-in-an-if-block |title=In Python, should I use else after a return in an if block? |date=17 February 2011 |work=[[Stack Overflow]] |publisher=Stack Exchange |accessdate=6 May 2011}}</ref>\n<ref name="AutoNT-27">{{cite web |url=http://python.net/~goodger/projects/pycon/2007/idiomatic/handout.html |title=Code Like a Pythonista: Idiomatic Python |last=Goodger |first=David}}</ref>\n<ref name="AutoNT-28">{{cite web |url=http://page.mi.fu-berlin.de/prechelt/Biblio/jccpprt_computer2000.pdf |title=An empirical comparison of C, C++, Java, Perl, Python, Rexx, and Tcl |first=Lutz |last=Prechelt <!-- "work" doesn\'t work.. |work=[http://page.mi.fu-berlin.de/prechelt/Biblio/ Bibliography of Lutz Prechelt]--> |date=14 March 2000 |accessdate=30 August 2013}}</ref>\n<ref name="quotes-about-python">{{cite web |url=https://www.python.org/about/quotes/ |title=Quotes about Python |publisher=Python Software Foundation |accessdate=8 January 2012}}</ref>\n<ref name="AutoNT-29">{{cite web |url=https://wiki.python.org/moin/OrganizationsUsingPython |title=Organizations Using Python |publisher=Python Software Foundation |accessdate=15 January 2009}}</ref>\n<ref name="AutoNT-30">{{ cite journal |title=Python : the holy grail of programming |journal=CERN Bulletin |issue=31/2006 |publisher=CERN Publications |date=31 July 2006 |url=http://cdsweb.cern.ch/journal/CERNBulletin/2006/31/News%20Articles/974627?ln=en |accessdate=11 February 2012}}</ref>\n<ref name="AutoNT-31">{{cite web |url=https://www.python.org/about/success/usa/ |title=Python Streamlines Space Shuttle Mission Design |last=Shafer |first=Daniel G. |date=17 January 2003 |publisher=Python Software Foundation |accessdate=24 November 2008}}</ref>\n<ref name="AutoNT-32">{{cite web |url=https://www.python.org/about/success/ilm/ |title=Industrial Light & Magic Runs on Python |last=Fortenberry |first=Tim |date=17 January 2003 |publisher=Python Software Foundation |accessdate=11 February 2012}}</ref>\n<ref name="AutoNT-33">{{cite web |url=http://www.eweek.com/c/a/Application-Development/Python-Slithers-into-Systems/ |title=Python Slithers into Systems |last=Taft |first=Darryl K. |date=5 March 2007 |work=eWeek.com |publisher=Ziff Davis Holdings |accessdate=24 September 2011}}</ref>\n<ref name="AutoNT-34">{{cite web |title=TIOBE Programming Community Index Python |author=TIOBE Software Index |year=2015 |url=http://www.tiobe.com/index.php/paperinfo/tpci/Python.html |accessdate=10 September 2015}}</ref>\n<ref name="AutoNT-35">{{cite web |title=Usage statistics and market share of Python for websites |year=2012 |url=http://w3techs.com/technologies/details/pl-python/all/all |accessdate=18 December 2012}}</ref>\n<ref name="AutoNT-38">{{cite web|url=http://www.jasc.com/support/customercare/articles/psp9components.asp |title=jasc psp9components |deadurl=yes |archiveurl=https://web.archive.org/web/20080319061519/http://www.jasc.com/support/customercare/articles/psp9components.asp |archivedate=19 March 2008 }}</ref>\n<ref name="AutoNT-39">{{cite web |url=http://webhelp.esri.com/arcgisdesktop/9.2/index.cfm?TopicName=About_getting_started_with_writing_geoprocessing_scripts |title=About getting started with writing geoprocessing scripts |date=17 November 2006 |work=ArcGIS Desktop Help 9.2 |publisher=Environmental Systems Research Institute |accessdate=11 February 2012}}</ref>\n<ref name="AutoNT-40">{{cite web |url=http://community.eveonline.com/news/dev-blogs/stackless-python-2.7/ |title=Stackless Python 2.7 |publisher=[[CCP Games]] |date=24 August 2010 |author=CCP porkbelly |work=EVE Community Dev Blogs |quote=As you may know, EVE has at its core the programming language known as Stackless Python.}}</ref>\n<ref name="AutoNT-41">{{cite web |url=http://www.2kgames.com/civ4/blog_03.htm |title=Modding Sid Meier\'s Civilization IV |last=Caudill |first=Barry |date=20 September 2005 |publisher=[[Firaxis Games]] |archiveurl=http://www.webcitation.org/5ru5VItfv |archivedate=10 August 2010 |work=Sid Meier\'s Civilization IV Developer Blog |quote=we created three levels of tools ... The next level offers Python and XML support, letting modders with more experience manipulate the game world and everything in it.}}</ref>\n<ref name="AutoNT-42">{{cite web |url=https://code.google.com/apis/documents/docs/1.0/developers_guide_python.html |title=Python Language Guide (v1.0) |work=Google Documents List Data API v1.0 |publisher=Google |archiveurl=http://www.webcitation.org/5ru5FHxfV |archivedate=10 August 2010}}</ref>\n<ref name="AutoNT-43">{{cite web|url=https://wiki.python.org/moin/PythonForArtificialIntelligence |title=Python for Artificial Intelligence |publisher=Wiki.python.org |date=19 July 2012 |accessdate=3 December 2012 |deadurl=yes |archiveurl=https://web.archive.org/20121101045354/http://wiki.python.org:80/moin/PythonForArtificialIntelligence |archivedate=1 November 2012 }}</ref>\n<ref name="AutoNT-44">{{cite journal |editor-last=Paine |editor-first=Jocelyn |title=AI in Python |journal=AI Expert Newsletter |publisher=Amzi! |date=August 2005 |url=http://www.ainewsletter.com/newsletters/aix_0508.htm#python_ai_ai |accessdate=11 February 2012}}</ref>\n<ref name="AutoNT-45">{{cite web|url=https://pypi.python.org/pypi/PyAIML|title=PyAIML 0.8.5 : Python Package Index|publisher=Pypi.python.org|accessdate=17 July 2013}}</ref>\n<ref name="AutoNT-46">{{ cite book |title=Artificial Intelligence: A Modern Approach |url=http://aima.cs.berkeley.edu/ |last1=Russell |first1=Stuart J. |authorlink1=Stuart J. Russell |last2=Norvig |first2=Peter |authorlink2=Peter Norvig |lastauthoramp=y |edition=3rd |year=2009 |publisher=Prentice Hall |location=Upper Saddle River, NJ |isbn=978-0-13-604259-4 |page=1062 |accessdate=11 February 2012}}</ref>\n<ref name="AutoNT-47">{{cite web |url=http://www.nltk.org|title=Natural Language Toolkit}}</ref>\n<ref name="AutoNT-49">{{cite web|url=http://www.immunitysec.com/products-immdbg.shtml|title=Immunity: Knowing You\'re Secure}}</ref>\n<ref name="AutoNT-50">{{cite web|url=http://oss.coresecurity.com/|title=Corelabs site}}</ref>\n<ref name="AutoNT-51">{{cite web |url=http://sugarlabs.org/go/Sugar |title=What is Sugar? |publisher=Sugar Labs |accessdate=11 February 2012}}</ref>\n<ref name="AutoNT-52">{{cite web |title=Is Python a good language for beginning programmers? |url=https://docs.python.org/faq/general.html#is-python-a-good-language-for-beginning-programmers |work=General Python FAQ |publisher=Python Software Foundation |accessdate=21 March 2007}}</ref>\n<ref name="AutoNT-53">{{cite web |url=http://www.secnetix.de/~olli/Python/block_indentation.hawk |title=Myths about indentation in Python |publisher=Secnetix.de |accessdate=19 April 2011}}</ref>\n<!--ref name="AutoNT-54">{{cite web |url=http://c2.com/cgi/wiki?PythonWhiteSpaceDiscussion |title=White Space Discussion |accessdate=1 January 2013}}</ref-->\n<ref name="AutoNT-55">{{cite web |last=van Rossum |first=Guido |url=http://neopythonic.blogspot.be/2009/04/tail-recursion-elimination.html |title=Tail Recursion Elimination |publisher=Neopythonic.blogspot.be |date=22 April 2009 |accessdate=3 December 2012}}</ref>\n<ref name="AutoNT-56">{{cite web |title=Language Design Is Not Just Solving Puzzles |url=http://www.artima.com/weblogs/viewpost.jsp?thread=147358 |first=Guido |last=van Rossum |date=9 February 2006 |accessdate=21 March 2007 |work=Artima forums |publisher=Artima}}</ref>\n<ref name="AutoNT-57">{{cite web |url=https://www.python.org/dev/peps/pep-0342/ |title=PEP 342&nbsp;– Coroutines via Enhanced Generators |last1=van Rossum |first1=Guido |last2=Eby |first2=Phillip J. |date=10 May 2005 |work=Python Enhancement Proposals |publisher=Python Software Foundation |accessdate=19 February 2012}}</ref>\n<ref name="AutoNT-58">{{cite web |url=https://www.python.org/dev/peps/pep-0380/ |title=PEP 380 |publisher=Python.org |date=|accessdate=3 December 2012}}</ref>\n<ref name="AutoNT-59">{{cite web |url=https://www.python.org/dev/peps/pep-0289/ |title=PEP 289&nbsp;– Generator Expressions |last=Hettinger |first=Raymond |date=30 January 2002 |work=Python Enhancement Proposals |publisher=Python Software Foundation |accessdate=19 February 2012}}</ref>\n<ref name="AutoNT-60">{{cite web |url=https://www.python.org/dev/peps/pep-0308/ |title=PEP 308&nbsp;– Conditional Expressions |last1=van Rossum |first1=Guido |last2=Hettinger |first2=Raymond |date=7 February 2003 |work=Python Enhancement Proposals |publisher=Python Software Foundation |accessdate=13 July 2011}}</ref>\n<ref name="AutoNT-61">{{cite web |url=https://docs.python.org/faq/design.html#why-must-self-be-used-explicitly-in-method-definitions-and-calls |title=Why must \'self\' be used explicitly in method definitions and calls? |work=Design and History FAQ |publisher=Python Software Foundation |accessdate=19 February 2012}}</ref>\n<ref name="classy">{{cite web |title=The Python Language Reference, section 3.3. New-style and classic classes, for release 2.7.1 |accessdate=12 January 2011 |url=https://docs.python.org/reference/datamodel.html#new-style-and-classic-classes}}</ref>\n<ref name="pep0237">{{cite web |url=https://www.python.org/dev/peps/pep-0237/ |title=PEP 237&nbsp;– Unifying Long Integers and Integers |last1=Zadka |first1=Moshe |last2=van Rossum |first2=Guido |date=11 March 2001 |work=Python Enhancement Proposals |publisher=Python Software Foundation |accessdate=24 September 2011}}</ref>\n<ref name="AutoNT-62">{{cite web |url=http://python-history.blogspot.com/2010/08/why-pythons-integer-division-floors.html |title=Why Python\'s Integer Division Floors |accessdate=25 August 2010}}</ref>\n<ref name="AutoNT-63">{{citation |url=https://docs.python.org/library/functions.html#round |accessdate=14 August 2011 |title=round |work=The Python standard library, release 2.7, §2: Built-in functions}}</ref>\n<ref name="AutoNT-64">{{citation |url=https://docs.python.org/py3k/library/functions.html#round |accessdate=14 August 2011 |title=round |work=The Python standard library, release 3.2, §2: Built-in functions}}</ref>\n<ref name="AutoNT-65">Python Essential Reference, David M Beazley</ref>\n<ref name="AutoNT-66">{{cite web |url=https://www.python.org/dev/peps/pep-0007/ |title=PEP 7&nbsp;– Style Guide for C Code |last=van Rossum |first=Guido |date=5 June 2001 |work=Python Enhancement Proposals |publisher=Python Software Foundation |accessdate=24 November 2008}}</ref>\n<ref name="AutoNT-67">{{cite web |url=https://docs.python.org/3/library/dis.html#python-bytecode-instructions |title=CPython byte code |publisher=Docs.python.org |accessdate=16 February 2016}}</ref>\n<ref name="AutoNT-68">{{cite web |url=http://www.troeger.eu/teaching/pythonvm08.pdf |title=Python 2.5 internals |format=PDF |accessdate=19 April 2011}}</ref>\n<ref name="AutoNT-69">{{cite web |url=http://www.oreilly.com/pub/a/oreilly/frank/rossum_1099.html |title=An Interview with Guido van Rossum |publisher=Oreilly.com |accessdate=24 November 2008}}</ref>\n<ref name="AutoNT-70">{{cite web |url=http://pypy.org/compat.html |title=PyPy compatibility |publisher=Pypy.org |date=|accessdate=3 December 2012}}</ref>\n<ref name="AutoNT-71">{{cite web |url=http://speed.pypy.org/ |title=speed comparison between CPython and Pypy |publisher=Speed.pypy.org |date=|accessdate=3 December 2012}}</ref>\n<ref name="AutoNT-72">{{cite web |url=http://morepypy.blogspot.be/2012/06/stm-with-threads.html |title=STM with threads |publisher=Morepypy.blogspot.be |date=10 June 2012 |accessdate=3 December 2012}}</ref>\n<ref name="AutoNT-73">{{cite web|url=http://doc.pypy.org/en/latest/stackless.html|title=Application-level Stackless features — PyPy 2.0.2 documentation|publisher=Doc.pypy.org|accessdate=17 July 2013}}</ref>\n<ref name="AutoNT-74">{{cite web |url=https://code.google.com/p/unladen-swallow/wiki/ProjectPlan |title=Plans for optimizing Python |work=Google Project Hosting |publisher=Google |date=15 December 2009 |accessdate=24 September 2011}}</ref>\n<ref name="AutoNT-86">{{cite web |first=Przemyslaw |last=Piotrowski |url=http://www.oracle.com/technetwork/articles/piotrowski-pythoncore-084049.html |title=Build a Rapid Web Development Environment for Python Server Pages and Oracle |work=Oracle Technology Network |publisher=Oracle |date=July 2006 |accessdate=12 March 2012}}</ref>\n<ref name="AutoNT-88">{{cite web |url=https://www.python.org/dev/peps/pep-0327/ |title=PEP 327&nbsp;– Decimal Data Type |last=Batista |first=Facundo |date=17 October 2003 |work=Python Enhancement Proposals |publisher=Python Software Foundation |accessdate=24 November 2008}}</ref>\n<ref name="AutoNT-89">{{cite web |url=https://www.python.org/dev/peps/pep-0333/ |title=PEP 333&nbsp;– Python Web Server Gateway Interface v1.0 |last=Eby |first=Phillip J. |date=7 December 2003 |work=Python Enhancement Proposals |publisher=Python Software Foundation |accessdate=19 February 2012}}</ref>\n<ref name="AutoNT-90">{{cite web |url=http://boo.codehaus.org/Gotchas+for+Python+Users |title=Gotchas for Python Users |work=boo.codehaus.org |publisher=Codehaus Foundation |accessdate=24 November 2008}}</ref>\n<ref name="AutoNT-91">{{cite web |url=http://cobra-language.com/docs/acknowledgements/ |title=Acknowledgements |last=Esterbrook |first=Charles |work=cobra-language.com |publisher=Cobra Language |accessdate=7 April 2010}}</ref>\n<ref name="AutoNT-92">{{cite web |url=http://cobra-language.com/docs/python/ |title=Comparison to Python |last=Esterbrook |first=Charles |work=cobra-language.com |publisher=Cobra Language |accessdate=7 April 2010}}</ref>\n<ref name="AutoNT-93">{{cite web |url=http://wiki.ecmascript.org/doku.php?id=proposals:iterators_and_generators |title=Proposals: iterators and generators [ES4 Wiki&#93; |publisher=wiki.ecmascript.org |accessdate=24 November 2008}}</ref>\n<ref name="AutoNT-94">{{ cite news |url=http://www.techcrunch.com/2009/11/10/google-go-language/ |title=Google’s Go: A New Programming Language That’s Python Meets C++ |last=Kincaid |first=Jason |date=10 November 2009 |publisher=TechCrunch |accessdate=29 January 2010}}</ref>\n<ref name="AutoNT-95">{{cite web |last=Strachan |first=James |date=29 August 2003 |title=Groovy&nbsp;– the birth of a new dynamic language for the Java platform |url=http://radio.weblogs.com/0112098/2003/08/29.html}}</ref>\n<ref name="AutoNT-96">{{cite web |url=http://people.csail.mit.edu/mikelin/ocaml+twt/ |title=The Whitespace Thing for OCaml |last=Lin |first=Mike |publisher=Massachusetts Institute of Technology |accessdate=12 April 2009}}</ref>\n<ref name="linuxdevcenter">{{cite web |url=http://www.linuxdevcenter.com/pub/a/linux/2001/11/29/ruby.html |title=An Interview with the Creator of Ruby |publisher=Linuxdevcenter.com |date=|accessdate=3 December 2012}}</ref>\n<ref name="AutoNT-99">{{cite web |url=http://www.tcl.tk/cgi-bin/tct/tip/3.html |title=TIP #3: TIP Format |last1=Kupries |first1=Andreas |last2=Fellows |first2=Donal K. |work=tcl.tk |publisher=Tcl Developer Xchange |date=14 September 2000 |accessdate=24 November 2008}}</ref>\n<ref name="AutoNT-100">{{cite web |url=http://www.erlang.org/eeps/eep-0001.html |title=EEP 1: EEP Purpose and Guidelines |last1=Gustafsson |first1=Per |last2=Niskanen |first2=Raimo |publisher=erlang.org |date=29 January 2007 |accessdate=19 April 2011}}</ref>\n<ref name="AutoNT-101">{{cite web |url=http://www.tiobe.com/index.php/content/paperinfo/tpci/ |title=TIOBE Programming Community Index for March 2012 |date=March 2012 |publisher=TIOBE Software |accessdate=25 March 2012}}</ref>\n}}\n\n== Further reading ==\n<!-------- THIS IS *NOT* A LIST OF ALL PYTHON BOOKS\nAccording to [[Wikipedia:Further reading]], criteria for inclusion includes:\n1. Should clearly qualify as WP:RS, as indicated by reviews and citations to it.\n...\n5. There should be guidelines on limiting the number of sources.\n6. To avoid spam, any book included should have received more than one good review in RS: newspapers and scholarly journals being the norm, and the clear balance of RS reviews should be positive. This would avoid self-publish spamming, POV pushing, and attempts by publishers to get books promoted through inclusion on Wikipedia. At the moment "editorial recommendations" as described in the manual smacks of OR.\n7. Neutrality on the part of editors is essential. In terms of major debates, items representing all major positions should be included, with annotations indicating the specific POV of each. We may have to work out rules where topic disputes are irreconcilable.\n\n-->\n* {{cite book |last=Downey |first=Allen B |title=Think Python: How to Think Like a Computer Scientist |edition=Version 1.6.6 |date=May 2012 |isbn=978-0-521-72596-5 |url=http://www.greenteapress.com/thinkpython/html/}}\n* {{cite news |url=http://www.computerworld.com.au/index.php/id;66665771 |title=The A-Z of Programming Languages: Python |last=Hamilton |first=Naomi |date=5 August 2008 |work=Computerworld |accessdate=31 March 2010}}\n* {{cite book |last=Lutz |first=Mark |title=Learning Python |publisher=O\'Reilly Media |year=2013 |edition=5th |isbn=978-0-596-15806-4 |url=http://shop.oreilly.com/product/0636920028154.do}}\n* {{cite book |last=Pilgrim |first=Mark |title=Dive Into Python |publisher=Apress |year=2004 |isbn=978-1-59059-356-1 |url=http://diveintopython.net}}\n* {{cite book |last=Pilgrim |first=Mark |title=Dive Into Python 3 |publisher=Apress |year=2009 |isbn=978-1-4302-2415-0 |url=http://diveintopython3.net}}\n* {{cite book|last=Summerfield|first=Mark|title=Programming in Python 3|publisher=Addison-Wesley Professional|year=2009|edition=2nd|isbn=978-0-321-68056-3|url=http://www.qtrac.eu/py3book.html}}\n\n== External links ==\n<!-- ======================== {{No more links}} =======================\n| PLEASE BE CAUTIOUS IN ADDING MORE LINKS TO THIS ARTICLE. Wikipedia  |\n| is not a collection of links nor should it be used for advertising. |\n|                                                                     |\n|           Excessive or inappropriate links WILL BE DELETED.         |\n| See [[Wikipedia:External links]] & [[Wikipedia:Spam]] for details.  |\n|                                                                     |\n| If there are already plentiful links, please propose additions or   |\n| replacements on this article\'s discussion page, or submit your link |\n| to the relevant category at the Open Directory Project (dmoz.org)   |\n| and link back to that category using the {{Dmoz}} template.         |\n============================= {{No more links}} =================== -->\n{{Sister project links |wikt=no |commons=Category:Python (programming language) |b=Python Programming |n=no |q=Python |s=no |v=Topic:Python |voy=no |species=no |d=no }}\n* {{Official website}}\n* {{Usenet|comp.lang.python}}\n* [http://python-history.blogspot.co.uk/ The History of Python (blog by Guido van Rossum)]\n* [https://mail.python.org/mailman/listinfo/python-list Python development list]\n* {{Dmoz|Computers/Programming/Languages/Python|Python}}\n\n{{Programming languages}}\n{{Python (programming language)}}\n{{Python web frameworks}}\n{{FOSS}}\n\n{{Good article}}\n\n{{Authority control}}\n\n[[Category:Class-based programming languages]]\n[[Category:Cross-platform free software]]\n[[Category:Dutch inventions]]\n[[Category:Dynamically typed programming languages]]\n[[Category:Educational programming languages]]\n[[Category:High-level programming languages]]\n[[Category:Object-oriented programming languages]]\n[[Category:Programming languages created in 1991]]\n[[Category:Python (programming language)| ]]\n[[Category:Scripting languages]]\n[[Category:Text-oriented programming languages]]'},assistservices:{title:'assistservices',content:'asdasdasd'}}};